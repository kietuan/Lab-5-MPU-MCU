
Lab-5 UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003efc  08003efc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003efc  08003efc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003efc  08003efc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08003f74  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003f74  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f30f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002071  00000000  00000000  0002f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00031420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018031  00000000  00000000  00032e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f64f  00000000  00000000  0004ae39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d9a6  00000000  00000000  0005a488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7e2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b88  00000000  00000000  000e7e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e78 	.word	0x08003e78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003e78 	.word	0x08003e78

0800014c <HAL_TIM_PeriodElapsedCallback>:
void uart_communication_fsm(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) { timer_run(); }
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	f000 f804 	bl	8000160 <timer_run>
 8000158:	bf00      	nop
 800015a:	3708      	adds	r7, #8
 800015c:	46bd      	mov	sp, r7
 800015e:	bd80      	pop	{r7, pc}

08000160 <timer_run>:

static void timer_run(void)
{
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0
    if (timer1_counter > 0)
 8000164:	4b09      	ldr	r3, [pc, #36]	; (800018c <timer_run+0x2c>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	dd0b      	ble.n	8000184 <timer_run+0x24>
    {
        timer1_counter--;
 800016c:	4b07      	ldr	r3, [pc, #28]	; (800018c <timer_run+0x2c>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	3b01      	subs	r3, #1
 8000172:	4a06      	ldr	r2, [pc, #24]	; (800018c <timer_run+0x2c>)
 8000174:	6013      	str	r3, [r2, #0]
        if (timer1_counter <= 0)
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <timer_run+0x2c>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	2b00      	cmp	r3, #0
 800017c:	dc02      	bgt.n	8000184 <timer_run+0x24>
            timer1_flag = 1;  // turn on the flag, the function will run
 800017e:	4b04      	ldr	r3, [pc, #16]	; (8000190 <timer_run+0x30>)
 8000180:	2201      	movs	r2, #1
 8000182:	601a      	str	r2, [r3, #0]
    }
}
 8000184:	bf00      	nop
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	2000008c 	.word	0x2000008c
 8000190:	20000090 	.word	0x20000090

08000194 <setTimer1>:

void setTimer1(int duration)  // to reset the timer.
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
    timer1_counter = duration / TIMER_CYCLE;
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4a08      	ldr	r2, [pc, #32]	; (80001c0 <setTimer1+0x2c>)
 80001a0:	fb82 1203 	smull	r1, r2, r2, r3
 80001a4:	1092      	asrs	r2, r2, #2
 80001a6:	17db      	asrs	r3, r3, #31
 80001a8:	1ad3      	subs	r3, r2, r3
 80001aa:	4a06      	ldr	r2, [pc, #24]	; (80001c4 <setTimer1+0x30>)
 80001ac:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <setTimer1+0x34>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
}
 80001b4:	bf00      	nop
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	66666667 	.word	0x66666667
 80001c4:	2000008c 	.word	0x2000008c
 80001c8:	20000090 	.word	0x20000090

080001cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <HAL_UART_RxCpltCallback+0x2c>)
 80001da:	4293      	cmp	r3, r2
 80001dc:	d107      	bne.n	80001ee <HAL_UART_RxCpltCallback+0x22>
        index_buffer++;
        if (index_buffer >= MAX_BUFFER_SIZE)
            index_buffer = 0;
        */

        buffer_flag = 1;
 80001de:	4b07      	ldr	r3, [pc, #28]	; (80001fc <HAL_UART_RxCpltCallback+0x30>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &receive_char, 1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	4906      	ldr	r1, [pc, #24]	; (8000200 <HAL_UART_RxCpltCallback+0x34>)
 80001e8:	4806      	ldr	r0, [pc, #24]	; (8000204 <HAL_UART_RxCpltCallback+0x38>)
 80001ea:	f002 fc34 	bl	8002a56 <HAL_UART_Receive_IT>
    }
}
 80001ee:	bf00      	nop
 80001f0:	3708      	adds	r7, #8
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40004400 	.word	0x40004400
 80001fc:	20000094 	.word	0x20000094
 8000200:	20000095 	.word	0x20000095
 8000204:	20000158 	.word	0x20000158

08000208 <command_parser_fsm>:

void command_parser_fsm(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
    //! RST# or
    //! OK#
    switch (command_state)
 800020c:	4b38      	ldr	r3, [pc, #224]	; (80002f0 <command_parser_fsm+0xe8>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b06      	cmp	r3, #6
 8000212:	d868      	bhi.n	80002e6 <command_parser_fsm+0xde>
 8000214:	a201      	add	r2, pc, #4	; (adr r2, 800021c <command_parser_fsm+0x14>)
 8000216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021a:	bf00      	nop
 800021c:	08000239 	.word	0x08000239
 8000220:	08000249 	.word	0x08000249
 8000224:	08000271 	.word	0x08000271
 8000228:	08000289 	.word	0x08000289
 800022c:	080002a1 	.word	0x080002a1
 8000230:	080002b7 	.word	0x080002b7
 8000234:	080002cf 	.word	0x080002cf
    {
        case READY:
            if (receive_char == '!')
 8000238:	4b2e      	ldr	r3, [pc, #184]	; (80002f4 <command_parser_fsm+0xec>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b21      	cmp	r3, #33	; 0x21
 800023e:	d151      	bne.n	80002e4 <command_parser_fsm+0xdc>
            {
                command_state = START;
 8000240:	4b2b      	ldr	r3, [pc, #172]	; (80002f0 <command_parser_fsm+0xe8>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
            }
    
            break;
 8000246:	e04d      	b.n	80002e4 <command_parser_fsm+0xdc>
        case START:
            if (receive_char == 'R')
 8000248:	4b2a      	ldr	r3, [pc, #168]	; (80002f4 <command_parser_fsm+0xec>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b52      	cmp	r3, #82	; 0x52
 800024e:	d103      	bne.n	8000258 <command_parser_fsm+0x50>
            {
                command_state = R;
 8000250:	4b27      	ldr	r3, [pc, #156]	; (80002f0 <command_parser_fsm+0xe8>)
 8000252:	2202      	movs	r2, #2
 8000254:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                command_state = READY;
            }
            break;
 8000256:	e046      	b.n	80002e6 <command_parser_fsm+0xde>
            else if ((receive_char == 'O'))
 8000258:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <command_parser_fsm+0xec>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b4f      	cmp	r3, #79	; 0x4f
 800025e:	d103      	bne.n	8000268 <command_parser_fsm+0x60>
                command_state = O;
 8000260:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <command_parser_fsm+0xe8>)
 8000262:	2205      	movs	r2, #5
 8000264:	701a      	strb	r2, [r3, #0]
            break;
 8000266:	e03e      	b.n	80002e6 <command_parser_fsm+0xde>
                command_state = READY;
 8000268:	4b21      	ldr	r3, [pc, #132]	; (80002f0 <command_parser_fsm+0xe8>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
            break;
 800026e:	e03a      	b.n	80002e6 <command_parser_fsm+0xde>
        case R:
            if (receive_char == 'S')
 8000270:	4b20      	ldr	r3, [pc, #128]	; (80002f4 <command_parser_fsm+0xec>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	2b53      	cmp	r3, #83	; 0x53
 8000276:	d103      	bne.n	8000280 <command_parser_fsm+0x78>
            {
                command_state = RS;
 8000278:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <command_parser_fsm+0xe8>)
 800027a:	2203      	movs	r2, #3
 800027c:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                command_state = READY;
            }
            break;
 800027e:	e032      	b.n	80002e6 <command_parser_fsm+0xde>
                command_state = READY;
 8000280:	4b1b      	ldr	r3, [pc, #108]	; (80002f0 <command_parser_fsm+0xe8>)
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
            break;
 8000286:	e02e      	b.n	80002e6 <command_parser_fsm+0xde>
        case RS:
            if (receive_char == 'T')
 8000288:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <command_parser_fsm+0xec>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b54      	cmp	r3, #84	; 0x54
 800028e:	d103      	bne.n	8000298 <command_parser_fsm+0x90>
            {
                command_state = RST;
 8000290:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <command_parser_fsm+0xe8>)
 8000292:	2204      	movs	r2, #4
 8000294:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                command_state = READY;
            }
            break;
 8000296:	e026      	b.n	80002e6 <command_parser_fsm+0xde>
                command_state = READY;
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <command_parser_fsm+0xe8>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
            break;
 800029e:	e022      	b.n	80002e6 <command_parser_fsm+0xde>
        case RST:
            if (receive_char == '#')
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <command_parser_fsm+0xec>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b23      	cmp	r3, #35	; 0x23
 80002a6:	d102      	bne.n	80002ae <command_parser_fsm+0xa6>
            {
                communication_state = SEND;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <command_parser_fsm+0xf0>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	701a      	strb	r2, [r3, #0]
            }
            command_state = READY;
 80002ae:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <command_parser_fsm+0xe8>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
            break;
 80002b4:	e017      	b.n	80002e6 <command_parser_fsm+0xde>
        case O:
            if (receive_char == 'K')
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <command_parser_fsm+0xec>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b4b      	cmp	r3, #75	; 0x4b
 80002bc:	d103      	bne.n	80002c6 <command_parser_fsm+0xbe>
            {
                command_state = OK;
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <command_parser_fsm+0xe8>)
 80002c0:	2206      	movs	r2, #6
 80002c2:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                command_state = READY;
            }
            break;
 80002c4:	e00f      	b.n	80002e6 <command_parser_fsm+0xde>
                command_state = READY;
 80002c6:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <command_parser_fsm+0xe8>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
            break;
 80002cc:	e00b      	b.n	80002e6 <command_parser_fsm+0xde>
        case OK:
            if (receive_char == '#')
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <command_parser_fsm+0xec>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b23      	cmp	r3, #35	; 0x23
 80002d4:	d102      	bne.n	80002dc <command_parser_fsm+0xd4>
            {
                communication_state = IDLE;
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <command_parser_fsm+0xf0>)
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]
            }
            command_state = READY;
 80002dc:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <command_parser_fsm+0xe8>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
            break;
 80002e2:	e000      	b.n	80002e6 <command_parser_fsm+0xde>
            break;
 80002e4:	bf00      	nop
    }
}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	200000d1 	.word	0x200000d1
 80002f4:	20000095 	.word	0x20000095
 80002f8:	200000d0 	.word	0x200000d0

080002fc <uart_communication_fsm>:

void uart_communication_fsm(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
    switch (communication_state)
 8000300:	4b2a      	ldr	r3, [pc, #168]	; (80003ac <uart_communication_fsm+0xb0>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b03      	cmp	r3, #3
 8000306:	d84b      	bhi.n	80003a0 <uart_communication_fsm+0xa4>
 8000308:	a201      	add	r2, pc, #4	; (adr r2, 8000310 <uart_communication_fsm+0x14>)
 800030a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030e:	bf00      	nop
 8000310:	080003a1 	.word	0x080003a1
 8000314:	08000321 	.word	0x08000321
 8000318:	08000373 	.word	0x08000373
 800031c:	0800035d 	.word	0x0800035d
    {
        case IDLE:
            /* do nothing */
            break;
        case SEND:
            ADC_value = HAL_ADC_GetValue(&hadc1);
 8000320:	4823      	ldr	r0, [pc, #140]	; (80003b0 <uart_communication_fsm+0xb4>)
 8000322:	f000 fd27 	bl	8000d74 <HAL_ADC_GetValue>
 8000326:	4603      	mov	r3, r0
 8000328:	461a      	mov	r2, r3
 800032a:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <uart_communication_fsm+0xb8>)
 800032c:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, str, sprintf(str, "!ADC = %d#", ADC_value), 1000);
 800032e:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <uart_communication_fsm+0xb8>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	461a      	mov	r2, r3
 8000334:	4920      	ldr	r1, [pc, #128]	; (80003b8 <uart_communication_fsm+0xbc>)
 8000336:	4821      	ldr	r0, [pc, #132]	; (80003bc <uart_communication_fsm+0xc0>)
 8000338:	f003 f964 	bl	8003604 <siprintf>
 800033c:	4603      	mov	r3, r0
 800033e:	b29a      	uxth	r2, r3
 8000340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000344:	491d      	ldr	r1, [pc, #116]	; (80003bc <uart_communication_fsm+0xc0>)
 8000346:	481e      	ldr	r0, [pc, #120]	; (80003c0 <uart_communication_fsm+0xc4>)
 8000348:	f002 fb02 	bl	8002950 <HAL_UART_Transmit>
            setTimer1(3000);
 800034c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000350:	f7ff ff20 	bl	8000194 <setTimer1>
            communication_state = WAIT;
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <uart_communication_fsm+0xb0>)
 8000356:	2203      	movs	r2, #3
 8000358:	701a      	strb	r2, [r3, #0]
            break;
 800035a:	e024      	b.n	80003a6 <uart_communication_fsm+0xaa>
        case WAIT:
            if (timer1_flag == 1)
 800035c:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <uart_communication_fsm+0xc8>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d11f      	bne.n	80003a4 <uart_communication_fsm+0xa8>
            {
                timer1_flag = 0;
 8000364:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <uart_communication_fsm+0xc8>)
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
                communication_state = RE_SEND;
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <uart_communication_fsm+0xb0>)
 800036c:	2202      	movs	r2, #2
 800036e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000370:	e018      	b.n	80003a4 <uart_communication_fsm+0xa8>
        case RE_SEND:
            HAL_UART_Transmit(&huart2, str, sprintf(str, "!ADC = %d#", ADC_value), 1000);
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <uart_communication_fsm+0xb8>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	461a      	mov	r2, r3
 8000378:	490f      	ldr	r1, [pc, #60]	; (80003b8 <uart_communication_fsm+0xbc>)
 800037a:	4810      	ldr	r0, [pc, #64]	; (80003bc <uart_communication_fsm+0xc0>)
 800037c:	f003 f942 	bl	8003604 <siprintf>
 8000380:	4603      	mov	r3, r0
 8000382:	b29a      	uxth	r2, r3
 8000384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000388:	490c      	ldr	r1, [pc, #48]	; (80003bc <uart_communication_fsm+0xc0>)
 800038a:	480d      	ldr	r0, [pc, #52]	; (80003c0 <uart_communication_fsm+0xc4>)
 800038c:	f002 fae0 	bl	8002950 <HAL_UART_Transmit>
            setTimer1(3000);
 8000390:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000394:	f7ff fefe 	bl	8000194 <setTimer1>
            communication_state = WAIT;
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <uart_communication_fsm+0xb0>)
 800039a:	2203      	movs	r2, #3
 800039c:	701a      	strb	r2, [r3, #0]
            break;
 800039e:	e002      	b.n	80003a6 <uart_communication_fsm+0xaa>
        default:
            break;
 80003a0:	bf00      	nop
 80003a2:	e000      	b.n	80003a6 <uart_communication_fsm+0xaa>
            break;
 80003a4:	bf00      	nop
    }
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	200000d0 	.word	0x200000d0
 80003b0:	200000e0 	.word	0x200000e0
 80003b4:	200000cc 	.word	0x200000cc
 80003b8:	08003e90 	.word	0x08003e90
 80003bc:	20000098 	.word	0x20000098
 80003c0:	20000158 	.word	0x20000158
 80003c4:	20000090 	.word	0x20000090

080003c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80003cc:	f000 faea 	bl	80009a4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80003d0:	f000 f82a 	bl	8000428 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80003d4:	f000 f92c 	bl	8000630 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80003d8:	f000 f900 	bl	80005dc <MX_USART2_UART_Init>
    MX_ADC1_Init();
 80003dc:	f000 f874 	bl	80004c8 <MX_ADC1_Init>
    MX_TIM2_Init();
 80003e0:	f000 f8b0 	bl	8000544 <MX_TIM2_Init>
    /* USER CODE BEGIN 2 */
    HAL_UART_Receive_IT(&huart2, &receive_char, 1);
 80003e4:	2201      	movs	r2, #1
 80003e6:	490b      	ldr	r1, [pc, #44]	; (8000414 <main+0x4c>)
 80003e8:	480b      	ldr	r0, [pc, #44]	; (8000418 <main+0x50>)
 80003ea:	f002 fb34 	bl	8002a56 <HAL_UART_Receive_IT>
    HAL_ADC_Start(&hadc1);
 80003ee:	480b      	ldr	r0, [pc, #44]	; (800041c <main+0x54>)
 80003f0:	f000 fc12 	bl	8000c18 <HAL_ADC_Start>
    HAL_TIM_Base_Start_IT(&htim2);
 80003f4:	480a      	ldr	r0, [pc, #40]	; (8000420 <main+0x58>)
 80003f6:	f001 fec3 	bl	8002180 <HAL_TIM_Base_Start_IT>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (buffer_flag)
 80003fa:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <main+0x5c>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d004      	beq.n	800040c <main+0x44>
        {
            command_parser_fsm();
 8000402:	f7ff ff01 	bl	8000208 <command_parser_fsm>
            buffer_flag = 0;
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <main+0x5c>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
        }

        uart_communication_fsm();
 800040c:	f7ff ff76 	bl	80002fc <uart_communication_fsm>
        if (buffer_flag)
 8000410:	e7f3      	b.n	80003fa <main+0x32>
 8000412:	bf00      	nop
 8000414:	20000095 	.word	0x20000095
 8000418:	20000158 	.word	0x20000158
 800041c:	200000e0 	.word	0x200000e0
 8000420:	20000110 	.word	0x20000110
 8000424:	20000094 	.word	0x20000094

08000428 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b094      	sub	sp, #80	; 0x50
 800042c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000432:	2228      	movs	r2, #40	; 0x28
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f003 f8dc 	bl	80035f4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000458:	2302      	movs	r3, #2
 800045a:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045c:	2301      	movs	r3, #1
 800045e:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000460:	2310      	movs	r3, #16
 8000462:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000464:	2300      	movs	r3, #0
 8000466:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046c:	4618      	mov	r0, r3
 800046e:	f001 f973 	bl	8001758 <HAL_RCC_OscConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x54>
    {
        Error_Handler();
 8000478:	f000 f90c 	bl	8000694 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType =
 800047c:	230f      	movs	r3, #15
 800047e:	617b      	str	r3, [r7, #20]
        RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000480:	2300      	movs	r3, #0
 8000482:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fbde 	bl	8001c58 <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x7e>
    {
        Error_Handler();
 80004a2:	f000 f8f7 	bl	8000694 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004a6:	2302      	movs	r3, #2
 80004a8:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 fd5f 	bl	8001f74 <HAL_RCCEx_PeriphCLKConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0x98>
    {
        Error_Handler();
 80004bc:	f000 f8ea 	bl	8000694 <Error_Handler>
    }
}
 80004c0:	bf00      	nop
 80004c2:	3750      	adds	r7, #80	; 0x50
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Common config
     */
    hadc1.Instance = ADC1;
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_ADC1_Init+0x74>)
 80004da:	4a19      	ldr	r2, [pc, #100]	; (8000540 <MX_ADC1_Init+0x78>)
 80004dc:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_ADC1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_ADC1_Init+0x74>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_ADC1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <MX_ADC1_Init+0x74>)
 80004f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004f6:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_ADC1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_ADC1_Init+0x74>)
 8000500:	2201      	movs	r2, #1
 8000502:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <MX_ADC1_Init+0x74>)
 8000506:	f000 faaf 	bl	8000a68 <HAL_ADC_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_ADC1_Init+0x4c>
    {
        Error_Handler();
 8000510:	f000 f8c0 	bl	8000694 <Error_Handler>
    }
    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_0;
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000518:	2301      	movs	r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4619      	mov	r1, r3
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_ADC1_Init+0x74>)
 8000526:	f000 fc31 	bl	8000d8c <HAL_ADC_ConfigChannel>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC1_Init+0x6c>
    {
        Error_Handler();
 8000530:	f000 f8b0 	bl	8000694 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200000e0 	.word	0x200000e0
 8000540:	40012400 	.word	0x40012400

08000544 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_TIM2_Init+0x94>)
 8000562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000566:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 7999;
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_TIM2_Init+0x94>)
 800056a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800056e:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_TIM2_Init+0x94>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 9;
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_TIM2_Init+0x94>)
 8000578:	2209      	movs	r2, #9
 800057a:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_TIM2_Init+0x94>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_TIM2_Init+0x94>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000588:	4813      	ldr	r0, [pc, #76]	; (80005d8 <MX_TIM2_Init+0x94>)
 800058a:	f001 fda9 	bl	80020e0 <HAL_TIM_Base_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM2_Init+0x54>
    {
        Error_Handler();
 8000594:	f000 f87e 	bl	8000694 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059c:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	4619      	mov	r1, r3
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <MX_TIM2_Init+0x94>)
 80005a6:	f001 ff3f 	bl	8002428 <HAL_TIM_ConfigClockSource>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM2_Init+0x70>
    {
        Error_Handler();
 80005b0:	f000 f870 	bl	8000694 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b4:	2300      	movs	r3, #0
 80005b6:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	4619      	mov	r1, r3
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <MX_TIM2_Init+0x94>)
 80005c2:	f002 f90b 	bl	80027dc <HAL_TIMEx_MasterConfigSynchronization>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM2_Init+0x8c>
    {
        Error_Handler();
 80005cc:	f000 f862 	bl	8000694 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000110 	.word	0x20000110

080005dc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART2_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005ec:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 8000614:	f002 f94c 	bl	80028b0 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 800061e:	f000 f839 	bl	8000694 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000158 	.word	0x20000158
 800062c:	40004400 	.word	0x40004400

08000630 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_GPIO_Init+0x5c>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a10      	ldr	r2, [pc, #64]	; (800068c <MX_GPIO_Init+0x5c>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_GPIO_Init+0x5c>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2120      	movs	r1, #32
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <MX_GPIO_Init+0x60>)
 8000662:	f001 f861 	bl	8001728 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000666:	2320      	movs	r3, #32
 8000668:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2302      	movs	r3, #2
 8000674:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	4619      	mov	r1, r3
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_GPIO_Init+0x60>)
 800067e:	f000 fed9 	bl	8001434 <HAL_GPIO_Init>
}
 8000682:	bf00      	nop
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800

08000694 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_MspInit+0x5c>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <HAL_MspInit+0x5c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6193      	str	r3, [r2, #24]
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_MspInit+0x5c>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_MspInit+0x5c>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <HAL_MspInit+0x5c>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <HAL_MspInit+0x5c>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_MspInit+0x60>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_MspInit+0x60>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010000 	.word	0x40010000

08000704 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <HAL_ADC_MspInit+0x6c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d121      	bne.n	8000768 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <HAL_ADC_MspInit+0x70>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <HAL_ADC_MspInit+0x70>)
 800072a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_ADC_MspInit+0x70>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_ADC_MspInit+0x70>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <HAL_ADC_MspInit+0x70>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_ADC_MspInit+0x70>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000754:	2301      	movs	r3, #1
 8000756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000758:	2303      	movs	r3, #3
 800075a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <HAL_ADC_MspInit+0x74>)
 8000764:	f000 fe66 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40012400 	.word	0x40012400
 8000774:	40021000 	.word	0x40021000
 8000778:	40010800 	.word	0x40010800

0800077c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800078c:	d113      	bne.n	80007b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_TIM_Base_MspInit+0x44>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <HAL_TIM_Base_MspInit+0x44>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_TIM_Base_MspInit+0x44>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	201c      	movs	r0, #28
 80007ac:	f000 fd59 	bl	8001262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007b0:	201c      	movs	r0, #28
 80007b2:	f000 fd72 	bl	800129a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a1f      	ldr	r2, [pc, #124]	; (800085c <HAL_UART_MspInit+0x98>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d137      	bne.n	8000854 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <HAL_UART_MspInit+0x9c>)
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <HAL_UART_MspInit+0x9c>)
 80007ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ee:	61d3      	str	r3, [r2, #28]
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <HAL_UART_MspInit+0x9c>)
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_UART_MspInit+0x9c>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_UART_MspInit+0x9c>)
 8000802:	f043 0304 	orr.w	r3, r3, #4
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_UART_MspInit+0x9c>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000814:	2304      	movs	r3, #4
 8000816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	4619      	mov	r1, r3
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <HAL_UART_MspInit+0xa0>)
 8000828:	f000 fe04 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800082c:	2308      	movs	r3, #8
 800082e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	4809      	ldr	r0, [pc, #36]	; (8000864 <HAL_UART_MspInit+0xa0>)
 8000840:	f000 fdf8 	bl	8001434 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2026      	movs	r0, #38	; 0x26
 800084a:	f000 fd0a 	bl	8001262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800084e:	2026      	movs	r0, #38	; 0x26
 8000850:	f000 fd23 	bl	800129a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40004400 	.word	0x40004400
 8000860:	40021000 	.word	0x40021000
 8000864:	40010800 	.word	0x40010800

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ae:	f000 f8bf 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <TIM2_IRQHandler+0x10>)
 80008be:	f001 fcab 	bl	8002218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000110 	.word	0x20000110

080008cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <USART2_IRQHandler+0x10>)
 80008d2:	f002 f8e5 	bl	8002aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000158 	.word	0x20000158

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
    const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
    {
        __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
    {
        errno = ENOMEM;
 8000910:	f002 fe46 	bl	80035a0 <__errno>
 8000914:	4603      	mov	r3, r0
 8000916:	220c      	movs	r2, #12
 8000918:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <_sbrk+0x64>)
 8000930:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20002800 	.word	0x20002800
 8000940:	00000400 	.word	0x00000400
 8000944:	200000d4 	.word	0x200000d4
 8000948:	200001b8 	.word	0x200001b8

0800094c <SystemInit>:
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR =
        VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif                                           /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000958:	f7ff fff8 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800095e:	490c      	ldr	r1, [pc, #48]	; (8000990 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a09      	ldr	r2, [pc, #36]	; (8000998 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000974:	4c09      	ldr	r4, [pc, #36]	; (800099c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000982:	f002 fe13 	bl	80035ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000986:	f7ff fd1f 	bl	80003c8 <main>
  bx lr
 800098a:	4770      	bx	lr
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000994:	08003f04 	.word	0x08003f04
  ldr r2, =_sbss
 8000998:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800099c:	200001b4 	.word	0x200001b4

080009a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_2_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_Init+0x28>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_Init+0x28>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 fc49 	bl	800124c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ba:	200f      	movs	r0, #15
 80009bc:	f000 f808 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c0:	f7ff fe6e 	bl	80006a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40022000 	.word	0x40022000

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x54>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x58>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fc61 	bl	80012b6 <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00e      	b.n	8000a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d80a      	bhi.n	8000a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f000 fc29 	bl	8001262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_InitTick+0x5c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000004 	.word	0x20000004

08000a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_IncTick+0x1c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x20>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <HAL_IncTick+0x20>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	200001a0 	.word	0x200001a0

08000a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <HAL_GetTick+0x10>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	200001a0 	.word	0x200001a0

08000a68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e0be      	b.n	8000c08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d109      	bne.n	8000aac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fe2c 	bl	8000704 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 fabf 	bl	8001030 <ADC_ConversionStop_Disable>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aba:	f003 0310 	and.w	r3, r3, #16
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 8099 	bne.w	8000bf6 <HAL_ADC_Init+0x18e>
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f040 8095 	bne.w	8000bf6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ad4:	f023 0302 	bic.w	r3, r3, #2
 8000ad8:	f043 0202 	orr.w	r2, r3, #2
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7b1b      	ldrb	r3, [r3, #12]
 8000aee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000af0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b00:	d003      	beq.n	8000b0a <HAL_ADC_Init+0xa2>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d102      	bne.n	8000b10 <HAL_ADC_Init+0xa8>
 8000b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0e:	e000      	b.n	8000b12 <HAL_ADC_Init+0xaa>
 8000b10:	2300      	movs	r3, #0
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7d1b      	ldrb	r3, [r3, #20]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d119      	bne.n	8000b54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7b1b      	ldrb	r3, [r3, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d109      	bne.n	8000b3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	035a      	lsls	r2, r3, #13
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	e00b      	b.n	8000b54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b40:	f043 0220 	orr.w	r2, r3, #32
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4c:	f043 0201 	orr.w	r2, r3, #1
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <HAL_ADC_Init+0x1a8>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	68b9      	ldr	r1, [r7, #8]
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b84:	d003      	beq.n	8000b8e <HAL_ADC_Init+0x126>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d104      	bne.n	8000b98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	051b      	lsls	r3, r3, #20
 8000b96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_ADC_Init+0x1ac>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d10b      	bne.n	8000bd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f023 0303 	bic.w	r3, r3, #3
 8000bca:	f043 0201 	orr.w	r2, r3, #1
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bd2:	e018      	b.n	8000c06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd8:	f023 0312 	bic.w	r3, r3, #18
 8000bdc:	f043 0210 	orr.w	r2, r3, #16
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be8:	f043 0201 	orr.w	r2, r3, #1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf4:	e007      	b.n	8000c06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfa:	f043 0210 	orr.w	r2, r3, #16
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	ffe1f7fd 	.word	0xffe1f7fd
 8000c14:	ff1f0efe 	.word	0xff1f0efe

08000c18 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d101      	bne.n	8000c32 <HAL_ADC_Start+0x1a>
 8000c2e:	2302      	movs	r3, #2
 8000c30:	e098      	b.n	8000d64 <HAL_ADC_Start+0x14c>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 f99e 	bl	8000f7c <ADC_Enable>
 8000c40:	4603      	mov	r3, r0
 8000c42:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8087 	bne.w	8000d5a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a41      	ldr	r2, [pc, #260]	; (8000d6c <HAL_ADC_Start+0x154>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d105      	bne.n	8000c76 <HAL_ADC_Start+0x5e>
 8000c6a:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <HAL_ADC_Start+0x158>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d115      	bne.n	8000ca2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d026      	beq.n	8000cde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ca0:	e01d      	b.n	8000cde <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a2f      	ldr	r2, [pc, #188]	; (8000d70 <HAL_ADC_Start+0x158>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d004      	beq.n	8000cc2 <HAL_ADC_Start+0xaa>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a2b      	ldr	r2, [pc, #172]	; (8000d6c <HAL_ADC_Start+0x154>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d10d      	bne.n	8000cde <HAL_ADC_Start+0xc6>
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <HAL_ADC_Start+0x158>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d007      	beq.n	8000cde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cee:	f023 0206 	bic.w	r2, r3, #6
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cf6:	e002      	b.n	8000cfe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f06f 0202 	mvn.w	r2, #2
 8000d0e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d1e:	d113      	bne.n	8000d48 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d24:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <HAL_ADC_Start+0x154>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d105      	bne.n	8000d36 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_ADC_Start+0x158>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d108      	bne.n	8000d48 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	e00c      	b.n	8000d62 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	e003      	b.n	8000d62 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40012800 	.word	0x40012800
 8000d70:	40012400 	.word	0x40012400

08000d74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d101      	bne.n	8000dac <HAL_ADC_ConfigChannel+0x20>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e0dc      	b.n	8000f66 <HAL_ADC_ConfigChannel+0x1da>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b06      	cmp	r3, #6
 8000dba:	d81c      	bhi.n	8000df6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	3b05      	subs	r3, #5
 8000dce:	221f      	movs	r2, #31
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4019      	ands	r1, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	3b05      	subs	r3, #5
 8000de8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34
 8000df4:	e03c      	b.n	8000e70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b0c      	cmp	r3, #12
 8000dfc:	d81c      	bhi.n	8000e38 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3b23      	subs	r3, #35	; 0x23
 8000e10:	221f      	movs	r2, #31
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	4019      	ands	r1, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	6818      	ldr	r0, [r3, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	3b23      	subs	r3, #35	; 0x23
 8000e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	631a      	str	r2, [r3, #48]	; 0x30
 8000e36:	e01b      	b.n	8000e70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	3b41      	subs	r3, #65	; 0x41
 8000e4a:	221f      	movs	r2, #31
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4019      	ands	r1, r3
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	3b41      	subs	r3, #65	; 0x41
 8000e64:	fa00 f203 	lsl.w	r2, r0, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b09      	cmp	r3, #9
 8000e76:	d91c      	bls.n	8000eb2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68d9      	ldr	r1, [r3, #12]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	3b1e      	subs	r3, #30
 8000e8a:	2207      	movs	r2, #7
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	4019      	ands	r1, r3
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	6898      	ldr	r0, [r3, #8]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3b1e      	subs	r3, #30
 8000ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	e019      	b.n	8000ee6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6919      	ldr	r1, [r3, #16]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4019      	ands	r1, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	6898      	ldr	r0, [r3, #8]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	fa00 f203 	lsl.w	r2, r0, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b10      	cmp	r3, #16
 8000eec:	d003      	beq.n	8000ef6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ef2:	2b11      	cmp	r3, #17
 8000ef4:	d132      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <HAL_ADC_ConfigChannel+0x1e4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d125      	bne.n	8000f4c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d126      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f1c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b10      	cmp	r3, #16
 8000f24:	d11a      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	0c9a      	lsrs	r2, r3, #18
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f3c:	e002      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f9      	bne.n	8000f3e <HAL_ADC_ConfigChannel+0x1b2>
 8000f4a:	e007      	b.n	8000f5c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f50:	f043 0220 	orr.w	r2, r3, #32
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	40012400 	.word	0x40012400
 8000f74:	20000000 	.word	0x20000000
 8000f78:	431bde83 	.word	0x431bde83

08000f7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d040      	beq.n	800101c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f042 0201 	orr.w	r2, r2, #1
 8000fa8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <ADC_Enable+0xac>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a1f      	ldr	r2, [pc, #124]	; (800102c <ADC_Enable+0xb0>)
 8000fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb4:	0c9b      	lsrs	r3, r3, #18
 8000fb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fb8:	e002      	b.n	8000fc0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f9      	bne.n	8000fba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fc6:	f7ff fd45 	bl	8000a54 <HAL_GetTick>
 8000fca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fcc:	e01f      	b.n	800100e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fce:	f7ff fd41 	bl	8000a54 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d918      	bls.n	800100e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d011      	beq.n	800100e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f043 0210 	orr.w	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e007      	b.n	800101e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b01      	cmp	r3, #1
 800101a:	d1d8      	bne.n	8000fce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000000 	.word	0x20000000
 800102c:	431bde83 	.word	0x431bde83

08001030 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d12e      	bne.n	80010a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800105a:	f7ff fcfb 	bl	8000a54 <HAL_GetTick>
 800105e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001060:	e01b      	b.n	800109a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001062:	f7ff fcf7 	bl	8000a54 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d914      	bls.n	800109a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b01      	cmp	r3, #1
 800107c:	d10d      	bne.n	800109a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001082:	f043 0210 	orr.w	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e007      	b.n	80010aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d0dc      	beq.n	8001062 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4906      	ldr	r1, [pc, #24]	; (800114c <__NVIC_EnableIRQ+0x34>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001218:	d301      	bcc.n	800121e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121a:	2301      	movs	r3, #1
 800121c:	e00f      	b.n	800123e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <SysTick_Config+0x40>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001226:	210f      	movs	r1, #15
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f7ff ff90 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <SysTick_Config+0x40>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SysTick_Config+0x40>)
 8001238:	2207      	movs	r2, #7
 800123a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	e000e010 	.word	0xe000e010

0800124c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff2d 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001274:	f7ff ff42 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	6978      	ldr	r0, [r7, #20]
 8001280:	f7ff ff90 	bl	80011a4 <NVIC_EncodePriority>
 8001284:	4602      	mov	r2, r0
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff5f 	bl	8001150 <__NVIC_SetPriority>
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff35 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffa2 	bl	8001208 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d008      	beq.n	80012f8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2204      	movs	r2, #4
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e020      	b.n	800133a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 020e 	bic.w	r2, r2, #14
 8001306:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001338:	7bfb      	ldrb	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d005      	beq.n	8001368 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2204      	movs	r2, #4
 8001360:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	e051      	b.n	800140c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 020e 	bic.w	r2, r2, #14
 8001376:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a22      	ldr	r2, [pc, #136]	; (8001418 <HAL_DMA_Abort_IT+0xd4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d029      	beq.n	80013e6 <HAL_DMA_Abort_IT+0xa2>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a21      	ldr	r2, [pc, #132]	; (800141c <HAL_DMA_Abort_IT+0xd8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d022      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x9e>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_DMA_Abort_IT+0xdc>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01a      	beq.n	80013dc <HAL_DMA_Abort_IT+0x98>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <HAL_DMA_Abort_IT+0xe0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d012      	beq.n	80013d6 <HAL_DMA_Abort_IT+0x92>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_DMA_Abort_IT+0xe4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00a      	beq.n	80013d0 <HAL_DMA_Abort_IT+0x8c>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_DMA_Abort_IT+0xe8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d102      	bne.n	80013ca <HAL_DMA_Abort_IT+0x86>
 80013c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013c8:	e00e      	b.n	80013e8 <HAL_DMA_Abort_IT+0xa4>
 80013ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ce:	e00b      	b.n	80013e8 <HAL_DMA_Abort_IT+0xa4>
 80013d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d4:	e008      	b.n	80013e8 <HAL_DMA_Abort_IT+0xa4>
 80013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013da:	e005      	b.n	80013e8 <HAL_DMA_Abort_IT+0xa4>
 80013dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e0:	e002      	b.n	80013e8 <HAL_DMA_Abort_IT+0xa4>
 80013e2:	2310      	movs	r3, #16
 80013e4:	e000      	b.n	80013e8 <HAL_DMA_Abort_IT+0xa4>
 80013e6:	2301      	movs	r3, #1
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_DMA_Abort_IT+0xec>)
 80013ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	4798      	blx	r3
    } 
  }
  return status;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020008 	.word	0x40020008
 800141c:	4002001c 	.word	0x4002001c
 8001420:	40020030 	.word	0x40020030
 8001424:	40020044 	.word	0x40020044
 8001428:	40020058 	.word	0x40020058
 800142c:	4002006c 	.word	0x4002006c
 8001430:	40020000 	.word	0x40020000

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b08b      	sub	sp, #44	; 0x2c
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001446:	e148      	b.n	80016da <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001448:	2201      	movs	r2, #1
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 8137 	bne.w	80016d4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4aa3      	ldr	r2, [pc, #652]	; (80016f8 <HAL_GPIO_Init+0x2c4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d05e      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001470:	4aa1      	ldr	r2, [pc, #644]	; (80016f8 <HAL_GPIO_Init+0x2c4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d875      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001476:	4aa1      	ldr	r2, [pc, #644]	; (80016fc <HAL_GPIO_Init+0x2c8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d058      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 800147c:	4a9f      	ldr	r2, [pc, #636]	; (80016fc <HAL_GPIO_Init+0x2c8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d86f      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001482:	4a9f      	ldr	r2, [pc, #636]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d052      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001488:	4a9d      	ldr	r2, [pc, #628]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d869      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800148e:	4a9d      	ldr	r2, [pc, #628]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d04c      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001494:	4a9b      	ldr	r2, [pc, #620]	; (8001704 <HAL_GPIO_Init+0x2d0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d863      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800149a:	4a9b      	ldr	r2, [pc, #620]	; (8001708 <HAL_GPIO_Init+0x2d4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d046      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 80014a0:	4a99      	ldr	r2, [pc, #612]	; (8001708 <HAL_GPIO_Init+0x2d4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d85d      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d82a      	bhi.n	8001500 <HAL_GPIO_Init+0xcc>
 80014aa:	2b12      	cmp	r3, #18
 80014ac:	d859      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014ae:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <HAL_GPIO_Init+0x80>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	0800152f 	.word	0x0800152f
 80014b8:	08001509 	.word	0x08001509
 80014bc:	0800151b 	.word	0x0800151b
 80014c0:	0800155d 	.word	0x0800155d
 80014c4:	08001563 	.word	0x08001563
 80014c8:	08001563 	.word	0x08001563
 80014cc:	08001563 	.word	0x08001563
 80014d0:	08001563 	.word	0x08001563
 80014d4:	08001563 	.word	0x08001563
 80014d8:	08001563 	.word	0x08001563
 80014dc:	08001563 	.word	0x08001563
 80014e0:	08001563 	.word	0x08001563
 80014e4:	08001563 	.word	0x08001563
 80014e8:	08001563 	.word	0x08001563
 80014ec:	08001563 	.word	0x08001563
 80014f0:	08001563 	.word	0x08001563
 80014f4:	08001563 	.word	0x08001563
 80014f8:	08001511 	.word	0x08001511
 80014fc:	08001525 	.word	0x08001525
 8001500:	4a82      	ldr	r2, [pc, #520]	; (800170c <HAL_GPIO_Init+0x2d8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001506:	e02c      	b.n	8001562 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e029      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	3304      	adds	r3, #4
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e024      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	3308      	adds	r3, #8
 8001520:	623b      	str	r3, [r7, #32]
          break;
 8001522:	e01f      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	330c      	adds	r3, #12
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	e01a      	b.n	8001564 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001536:	2304      	movs	r3, #4
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e013      	b.n	8001564 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d105      	bne.n	8001550 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001544:	2308      	movs	r3, #8
 8001546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	611a      	str	r2, [r3, #16]
          break;
 800154e:	e009      	b.n	8001564 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	615a      	str	r2, [r3, #20]
          break;
 800155a:	e003      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x130>
          break;
 8001562:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2bff      	cmp	r3, #255	; 0xff
 8001568:	d801      	bhi.n	800156e <HAL_GPIO_Init+0x13a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	e001      	b.n	8001572 <HAL_GPIO_Init+0x13e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3304      	adds	r3, #4
 8001572:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2bff      	cmp	r3, #255	; 0xff
 8001578:	d802      	bhi.n	8001580 <HAL_GPIO_Init+0x14c>
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0x152>
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	3b08      	subs	r3, #8
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	210f      	movs	r1, #15
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	401a      	ands	r2, r3
 8001598:	6a39      	ldr	r1, [r7, #32]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8090 	beq.w	80016d4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b4:	4b56      	ldr	r3, [pc, #344]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a55      	ldr	r2, [pc, #340]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_GPIO_Init+0x2dc>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015cc:	4a51      	ldr	r2, [pc, #324]	; (8001714 <HAL_GPIO_Init+0x2e0>)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a49      	ldr	r2, [pc, #292]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00d      	beq.n	8001614 <HAL_GPIO_Init+0x1e0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a48      	ldr	r2, [pc, #288]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d007      	beq.n	8001610 <HAL_GPIO_Init+0x1dc>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a47      	ldr	r2, [pc, #284]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d101      	bne.n	800160c <HAL_GPIO_Init+0x1d8>
 8001608:	2302      	movs	r3, #2
 800160a:	e004      	b.n	8001616 <HAL_GPIO_Init+0x1e2>
 800160c:	2303      	movs	r3, #3
 800160e:	e002      	b.n	8001616 <HAL_GPIO_Init+0x1e2>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_GPIO_Init+0x1e2>
 8001614:	2300      	movs	r3, #0
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	f002 0203 	and.w	r2, r2, #3
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	4093      	lsls	r3, r2
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001626:	493b      	ldr	r1, [pc, #236]	; (8001714 <HAL_GPIO_Init+0x2e0>)
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	4937      	ldr	r1, [pc, #220]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800164e:	4b35      	ldr	r3, [pc, #212]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	4933      	ldr	r1, [pc, #204]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 8001658:	4013      	ands	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001668:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	492d      	ldr	r1, [pc, #180]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	60cb      	str	r3, [r1, #12]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	4929      	ldr	r1, [pc, #164]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 8001680:	4013      	ands	r3, r2
 8001682:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4923      	ldr	r1, [pc, #140]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	491f      	ldr	r1, [pc, #124]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4919      	ldr	r1, [pc, #100]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4915      	ldr	r1, [pc, #84]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	3301      	adds	r3, #1
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f47f aeaf 	bne.w	8001448 <HAL_GPIO_Init+0x14>
  }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	372c      	adds	r7, #44	; 0x2c
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	10320000 	.word	0x10320000
 80016fc:	10310000 	.word	0x10310000
 8001700:	10220000 	.word	0x10220000
 8001704:	10210000 	.word	0x10210000
 8001708:	10120000 	.word	0x10120000
 800170c:	10110000 	.word	0x10110000
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000
 8001718:	40010800 	.word	0x40010800
 800171c:	40010c00 	.word	0x40010c00
 8001720:	40011000 	.word	0x40011000
 8001724:	40010400 	.word	0x40010400

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001744:	e003      	b.n	800174e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	041a      	lsls	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	611a      	str	r2, [r3, #16]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e26c      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8087 	beq.w	8001886 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001778:	4b92      	ldr	r3, [pc, #584]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b04      	cmp	r3, #4
 8001782:	d00c      	beq.n	800179e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001784:	4b8f      	ldr	r3, [pc, #572]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	d112      	bne.n	80017b6 <HAL_RCC_OscConfig+0x5e>
 8001790:	4b8c      	ldr	r3, [pc, #560]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179c:	d10b      	bne.n	80017b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179e:	4b89      	ldr	r3, [pc, #548]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d06c      	beq.n	8001884 <HAL_RCC_OscConfig+0x12c>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d168      	bne.n	8001884 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e246      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x76>
 80017c0:	4b80      	ldr	r3, [pc, #512]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a7f      	ldr	r2, [pc, #508]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e02e      	b.n	800182c <HAL_RCC_OscConfig+0xd4>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x98>
 80017d6:	4b7b      	ldr	r3, [pc, #492]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a7a      	ldr	r2, [pc, #488]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b78      	ldr	r3, [pc, #480]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a77      	ldr	r2, [pc, #476]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e01d      	b.n	800182c <HAL_RCC_OscConfig+0xd4>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0xbc>
 80017fa:	4b72      	ldr	r3, [pc, #456]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a71      	ldr	r2, [pc, #452]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b6f      	ldr	r3, [pc, #444]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6e      	ldr	r2, [pc, #440]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e00b      	b.n	800182c <HAL_RCC_OscConfig+0xd4>
 8001814:	4b6b      	ldr	r3, [pc, #428]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a6a      	ldr	r2, [pc, #424]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 800181a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a67      	ldr	r2, [pc, #412]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d013      	beq.n	800185c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff f90e 	bl	8000a54 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183c:	f7ff f90a 	bl	8000a54 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	; 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e1fa      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	4b5d      	ldr	r3, [pc, #372]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0xe4>
 800185a:	e014      	b.n	8001886 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff f8fa 	bl	8000a54 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff f8f6 	bl	8000a54 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e1e6      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x10c>
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d063      	beq.n	800195a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001892:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800189e:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d11c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x18c>
 80018aa:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d116      	bne.n	80018e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b6:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <HAL_RCC_OscConfig+0x176>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e1ba      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ce:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4939      	ldr	r1, [pc, #228]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e2:	e03a      	b.n	800195a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f8af 	bl	8000a54 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff f8ab 	bl	8000a54 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e19b      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001918:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4927      	ldr	r1, [pc, #156]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
 800192c:	e015      	b.n	800195a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff f88e 	bl	8000a54 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193c:	f7ff f88a 	bl	8000a54 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e17a      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d03a      	beq.n	80019dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d019      	beq.n	80019a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001974:	f7ff f86e 	bl	8000a54 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff f86a 	bl	8000a54 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e15a      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_RCC_OscConfig+0x26c>)
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800199a:	2001      	movs	r0, #1
 800199c:	f000 facc 	bl	8001f38 <RCC_Delay>
 80019a0:	e01c      	b.n	80019dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a8:	f7ff f854 	bl	8000a54 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ae:	e00f      	b.n	80019d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff f850 	bl	8000a54 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d908      	bls.n	80019d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e140      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	42420000 	.word	0x42420000
 80019cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d0:	4b9e      	ldr	r3, [pc, #632]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1e9      	bne.n	80019b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80a6 	beq.w	8001b36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ee:	4b97      	ldr	r3, [pc, #604]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10d      	bne.n	8001a16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b94      	ldr	r3, [pc, #592]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a93      	ldr	r2, [pc, #588]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b91      	ldr	r3, [pc, #580]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a12:	2301      	movs	r3, #1
 8001a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	4b8e      	ldr	r3, [pc, #568]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d118      	bne.n	8001a54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a22:	4b8b      	ldr	r3, [pc, #556]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a8a      	ldr	r2, [pc, #552]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f811 	bl	8000a54 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a36:	f7ff f80d 	bl	8000a54 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b64      	cmp	r3, #100	; 0x64
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0fd      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	4b81      	ldr	r3, [pc, #516]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x312>
 8001a5c:	4b7b      	ldr	r3, [pc, #492]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4a7a      	ldr	r2, [pc, #488]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6213      	str	r3, [r2, #32]
 8001a68:	e02d      	b.n	8001ac6 <HAL_RCC_OscConfig+0x36e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x334>
 8001a72:	4b76      	ldr	r3, [pc, #472]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a75      	ldr	r2, [pc, #468]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	6213      	str	r3, [r2, #32]
 8001a7e:	4b73      	ldr	r3, [pc, #460]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a72      	ldr	r2, [pc, #456]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	6213      	str	r3, [r2, #32]
 8001a8a:	e01c      	b.n	8001ac6 <HAL_RCC_OscConfig+0x36e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b05      	cmp	r3, #5
 8001a92:	d10c      	bne.n	8001aae <HAL_RCC_OscConfig+0x356>
 8001a94:	4b6d      	ldr	r3, [pc, #436]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4a6c      	ldr	r2, [pc, #432]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6213      	str	r3, [r2, #32]
 8001aa0:	4b6a      	ldr	r3, [pc, #424]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4a69      	ldr	r2, [pc, #420]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6213      	str	r3, [r2, #32]
 8001aac:	e00b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x36e>
 8001aae:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a66      	ldr	r2, [pc, #408]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6213      	str	r3, [r2, #32]
 8001aba:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a63      	ldr	r2, [pc, #396]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
 8001ac4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d015      	beq.n	8001afa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ace:	f7fe ffc1 	bl	8000a54 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7fe ffbd 	bl	8000a54 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e0ab      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0ee      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x37e>
 8001af8:	e014      	b.n	8001b24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7fe ffab 	bl	8000a54 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7fe ffa7 	bl	8000a54 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e095      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b18:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1ee      	bne.n	8001b02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d105      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2a:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8081 	beq.w	8001c42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b40:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d061      	beq.n	8001c10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d146      	bne.n	8001be2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b54:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <HAL_RCC_OscConfig+0x4fc>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7fe ff7b 	bl	8000a54 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b62:	f7fe ff77 	bl	8000a54 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e067      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b88:	d108      	bne.n	8001b9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b8a:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	492d      	ldr	r1, [pc, #180]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a19      	ldr	r1, [r3, #32]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	430b      	orrs	r3, r1
 8001bae:	4927      	ldr	r1, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x4fc>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7fe ff4b 	bl	8000a54 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7fe ff47 	bl	8000a54 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e037      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x46a>
 8001be0:	e02f      	b.n	8001c42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <HAL_RCC_OscConfig+0x4fc>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7fe ff34 	bl	8000a54 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7fe ff30 	bl	8000a54 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e020      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x498>
 8001c0e:	e018      	b.n	8001c42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e013      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40007000 	.word	0x40007000
 8001c54:	42420060 	.word	0x42420060

08001c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0d0      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d910      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 0207 	bic.w	r2, r3, #7
 8001c82:	4965      	ldr	r1, [pc, #404]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0b8      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	494d      	ldr	r1, [pc, #308]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d040      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d115      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e07f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e073      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e06b      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4936      	ldr	r1, [pc, #216]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d48:	f7fe fe84 	bl	8000a54 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7fe fe80 	bl	8000a54 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e053      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d210      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 0207 	bic.w	r2, r3, #7
 8001d8e:	4922      	ldr	r1, [pc, #136]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e032      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4916      	ldr	r1, [pc, #88]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001de6:	f000 f821 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	490a      	ldr	r1, [pc, #40]	; (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001df8:	5ccb      	ldrb	r3, [r1, r3]
 8001dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1cc>)
 8001e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_ClockConfig+0x1d0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fde2 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40022000 	.word	0x40022000
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	08003e9c 	.word	0x08003e9c
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d002      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x30>
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0x36>
 8001e5a:	e027      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5e:	613b      	str	r3, [r7, #16]
      break;
 8001e60:	e027      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	0c9b      	lsrs	r3, r3, #18
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d010      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0c5b      	lsrs	r3, r3, #17
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e8e:	fb02 f203 	mul.w	r2, r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e004      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	613b      	str	r3, [r7, #16]
      break;
 8001eaa:	e002      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eae:	613b      	str	r3, [r7, #16]
      break;
 8001eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb2:	693b      	ldr	r3, [r7, #16]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	007a1200 	.word	0x007a1200
 8001ec8:	08003eb4 	.word	0x08003eb4
 8001ecc:	08003ec4 	.word	0x08003ec4
 8001ed0:	003d0900 	.word	0x003d0900

08001ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b02      	ldr	r3, [pc, #8]	; (8001ee4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	20000000 	.word	0x20000000

08001ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eec:	f7ff fff2 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4903      	ldr	r1, [pc, #12]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08003eac 	.word	0x08003eac

08001f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f14:	f7ff ffde 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	0adb      	lsrs	r3, r3, #11
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4903      	ldr	r1, [pc, #12]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08003eac 	.word	0x08003eac

08001f38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <RCC_Delay+0x34>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <RCC_Delay+0x38>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0a5b      	lsrs	r3, r3, #9
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f54:	bf00      	nop
  }
  while (Delay --);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1e5a      	subs	r2, r3, #1
 8001f5a:	60fa      	str	r2, [r7, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f9      	bne.n	8001f54 <RCC_Delay+0x1c>
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	10624dd3 	.word	0x10624dd3

08001f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d07d      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f90:	2300      	movs	r3, #0
 8001f92:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10d      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	4a4b      	ldr	r2, [pc, #300]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001faa:	61d3      	str	r3, [r2, #28]
 8001fac:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d118      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc8:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a42      	ldr	r2, [pc, #264]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd4:	f7fe fd3e 	bl	8000a54 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	e008      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7fe fd3a 	bl	8000a54 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e06d      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ffa:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002002:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d02e      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d027      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002020:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002028:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800202e:	4a29      	ldr	r2, [pc, #164]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d014      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7fe fd09 	bl	8000a54 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe fd05 	bl	8000a54 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	; 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e036      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0ee      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4917      	ldr	r1, [pc, #92]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002076:	4313      	orrs	r3, r2
 8002078:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002098:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	490b      	ldr	r1, [pc, #44]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4904      	ldr	r1, [pc, #16]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
 80020dc:	42420440 	.word	0x42420440

080020e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e041      	b.n	8002176 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe fb38 	bl	800077c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3304      	adds	r3, #4
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f000 fa6e 	bl	8002600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d001      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e035      	b.n	8002204 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a16      	ldr	r2, [pc, #88]	; (8002210 <HAL_TIM_Base_Start_IT+0x90>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_TIM_Base_Start_IT+0x4e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c2:	d004      	beq.n	80021ce <HAL_TIM_Base_Start_IT+0x4e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a12      	ldr	r2, [pc, #72]	; (8002214 <HAL_TIM_Base_Start_IT+0x94>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d111      	bne.n	80021f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d010      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	e007      	b.n	8002202 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40000400 	.word	0x40000400

08002218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d122      	bne.n	8002274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b02      	cmp	r3, #2
 800223a:	d11b      	bne.n	8002274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0202 	mvn.w	r2, #2
 8002244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f9b4 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f9a7 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f9b6 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b04      	cmp	r3, #4
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b04      	cmp	r3, #4
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0204 	mvn.w	r2, #4
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f98a 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f97d 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f98c 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d122      	bne.n	800231c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d11b      	bne.n	800231c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0208 	mvn.w	r2, #8
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f960 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f953 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f962 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b10      	cmp	r3, #16
 8002328:	d122      	bne.n	8002370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b10      	cmp	r3, #16
 8002336:	d11b      	bne.n	8002370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0210 	mvn.w	r2, #16
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2208      	movs	r2, #8
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f936 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f929 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f938 	bl	80025da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10e      	bne.n	800239c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0201 	mvn.w	r2, #1
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fd fed8 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b80      	cmp	r3, #128	; 0x80
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d107      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa6b 	bl	800289e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8fc 	bl	80025ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b20      	cmp	r3, #32
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0220 	mvn.w	r2, #32
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fa36 	bl	800288c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_TIM_ConfigClockSource+0x1c>
 8002440:	2302      	movs	r3, #2
 8002442:	e0b4      	b.n	80025ae <HAL_TIM_ConfigClockSource+0x186>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800246a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247c:	d03e      	beq.n	80024fc <HAL_TIM_ConfigClockSource+0xd4>
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002482:	f200 8087 	bhi.w	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 8002486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248a:	f000 8086 	beq.w	800259a <HAL_TIM_ConfigClockSource+0x172>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	d87f      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 8002494:	2b70      	cmp	r3, #112	; 0x70
 8002496:	d01a      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0xa6>
 8002498:	2b70      	cmp	r3, #112	; 0x70
 800249a:	d87b      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b60      	cmp	r3, #96	; 0x60
 800249e:	d050      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x11a>
 80024a0:	2b60      	cmp	r3, #96	; 0x60
 80024a2:	d877      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b50      	cmp	r3, #80	; 0x50
 80024a6:	d03c      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xfa>
 80024a8:	2b50      	cmp	r3, #80	; 0x50
 80024aa:	d873      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d058      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x13a>
 80024b0:	2b40      	cmp	r3, #64	; 0x40
 80024b2:	d86f      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b30      	cmp	r3, #48	; 0x30
 80024b6:	d064      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024b8:	2b30      	cmp	r3, #48	; 0x30
 80024ba:	d86b      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d060      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d867      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d05c      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	d05a      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024cc:	e062      	b.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6899      	ldr	r1, [r3, #8]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f000 f95e 	bl	800279e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	609a      	str	r2, [r3, #8]
      break;
 80024fa:	e04f      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6899      	ldr	r1, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f000 f947 	bl	800279e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800251e:	609a      	str	r2, [r3, #8]
      break;
 8002520:	e03c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	461a      	mov	r2, r3
 8002530:	f000 f8be 	bl	80026b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2150      	movs	r1, #80	; 0x50
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f915 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 8002540:	e02c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	461a      	mov	r2, r3
 8002550:	f000 f8dc 	bl	800270c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2160      	movs	r1, #96	; 0x60
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f905 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 8002560:	e01c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	461a      	mov	r2, r3
 8002570:	f000 f89e 	bl	80026b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2140      	movs	r1, #64	; 0x40
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f8f5 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 8002580:	e00c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	4610      	mov	r0, r2
 800258e:	f000 f8ec 	bl	800276a <TIM_ITRx_SetConfig>
      break;
 8002592:	e003      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      break;
 8002598:	e000      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800259a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
	...

08002600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <TIM_Base_SetConfig+0xa8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <TIM_Base_SetConfig+0x28>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261e:	d003      	beq.n	8002628 <TIM_Base_SetConfig+0x28>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a22      	ldr	r2, [pc, #136]	; (80026ac <TIM_Base_SetConfig+0xac>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d108      	bne.n	800263a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <TIM_Base_SetConfig+0xa8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <TIM_Base_SetConfig+0x52>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002648:	d003      	beq.n	8002652 <TIM_Base_SetConfig+0x52>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a17      	ldr	r2, [pc, #92]	; (80026ac <TIM_Base_SetConfig+0xac>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d108      	bne.n	8002664 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <TIM_Base_SetConfig+0xa8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d103      	bne.n	8002698 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	615a      	str	r2, [r3, #20]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	40000400 	.word	0x40000400

080026b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f023 0201 	bic.w	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f023 030a 	bic.w	r3, r3, #10
 80026ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	621a      	str	r2, [r3, #32]
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f023 0210 	bic.w	r2, r3, #16
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	031b      	lsls	r3, r3, #12
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002748:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	621a      	str	r2, [r3, #32]
}
 8002760:	bf00      	nop
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	f043 0307 	orr.w	r3, r3, #7
 800278c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	609a      	str	r2, [r3, #8]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800279e:	b480      	push	{r7}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	021a      	lsls	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	609a      	str	r2, [r3, #8]
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e041      	b.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a14      	ldr	r2, [pc, #80]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d009      	beq.n	800284c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d004      	beq.n	800284c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a10      	ldr	r2, [pc, #64]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d10c      	bne.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002852:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	4313      	orrs	r3, r2
 800285c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40000400 	.word	0x40000400

0800288c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e042      	b.n	8002948 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fd ff74 	bl	80007c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	; 0x24
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fdc5 	bl	8003484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b20      	cmp	r3, #32
 800296e:	d16d      	bne.n	8002a4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_UART_Transmit+0x2c>
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e066      	b.n	8002a4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2221      	movs	r2, #33	; 0x21
 800298a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800298e:	f7fe f861 	bl	8000a54 <HAL_GetTick>
 8002992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	88fa      	ldrh	r2, [r7, #6]
 8002998:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	88fa      	ldrh	r2, [r7, #6]
 800299e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a8:	d108      	bne.n	80029bc <HAL_UART_Transmit+0x6c>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d104      	bne.n	80029bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	e003      	b.n	80029c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029c4:	e02a      	b.n	8002a1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2180      	movs	r1, #128	; 0x80
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fb14 	bl	8002ffe <UART_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e036      	b.n	8002a4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	3302      	adds	r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	e007      	b.n	8002a0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1cf      	bne.n	80029c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2140      	movs	r1, #64	; 0x40
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fae4 	bl	8002ffe <UART_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e006      	b.n	8002a4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	4613      	mov	r3, r2
 8002a62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d112      	bne.n	8002a96 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_UART_Receive_IT+0x26>
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e00b      	b.n	8002a98 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fb24 	bl	80030da <UART_Start_Receive_IT>
 8002a92:	4603      	mov	r3, r0
 8002a94:	e000      	b.n	8002a98 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
  }
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b0ba      	sub	sp, #232	; 0xe8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_UART_IRQHandler+0x66>
 8002af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fc01 	bl	8003306 <UART_Receive_IT>
      return;
 8002b04:	e25b      	b.n	8002fbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80de 	beq.w	8002ccc <HAL_UART_IRQHandler+0x22c>
 8002b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d106      	bne.n	8002b2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80d1 	beq.w	8002ccc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_UART_IRQHandler+0xae>
 8002b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_UART_IRQHandler+0xd2>
 8002b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f043 0202 	orr.w	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_UART_IRQHandler+0xf6>
 8002b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f043 0204 	orr.w	r2, r3, #4
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d011      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x126>
 8002ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f043 0208 	orr.w	r2, r3, #8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 81f2 	beq.w	8002fb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_UART_IRQHandler+0x14e>
 8002bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fb8c 	bl	8003306 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <HAL_UART_IRQHandler+0x17a>
 8002c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d04f      	beq.n	8002cba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fa96 	bl	800314c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d041      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3314      	adds	r3, #20
 8002c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3314      	adds	r3, #20
 8002c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1d9      	bne.n	8002c2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d013      	beq.n	8002caa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	4a7e      	ldr	r2, [pc, #504]	; (8002e80 <HAL_UART_IRQHandler+0x3e0>)
 8002c88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fb58 	bl	8001344 <HAL_DMA_Abort_IT>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d016      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca8:	e00e      	b.n	8002cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f993 	bl	8002fd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	e00a      	b.n	8002cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f98f 	bl	8002fd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	e006      	b.n	8002cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f98b 	bl	8002fd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002cc6:	e175      	b.n	8002fb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc8:	bf00      	nop
    return;
 8002cca:	e173      	b.n	8002fb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	f040 814f 	bne.w	8002f74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8148 	beq.w	8002f74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8141 	beq.w	8002f74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80b6 	beq.w	8002e84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8145 	beq.w	8002fb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d36:	429a      	cmp	r2, r3
 8002d38:	f080 813e 	bcs.w	8002fb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	f000 8088 	beq.w	8002e60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d5e:	e853 3f00 	ldrex	r3, [r3]
 8002d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d7c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d8c:	e841 2300 	strex	r3, r2, [r1]
 8002d90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1d9      	bne.n	8002d50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3314      	adds	r3, #20
 8002da2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dc0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002dd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e1      	bne.n	8002d9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3314      	adds	r3, #20
 8002dde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3314      	adds	r3, #20
 8002df8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dfc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e04:	e841 2300 	strex	r3, r2, [r1]
 8002e08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e3      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	330c      	adds	r3, #12
 8002e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e30:	f023 0310 	bic.w	r3, r3, #16
 8002e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e42:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e3      	bne.n	8002e1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fa37 	bl	80012ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	4619      	mov	r1, r3
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8b6 	bl	8002fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e7c:	e09c      	b.n	8002fb8 <HAL_UART_IRQHandler+0x518>
 8002e7e:	bf00      	nop
 8002e80:	08003211 	.word	0x08003211
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 808e 	beq.w	8002fbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8089 	beq.w	8002fbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ece:	647a      	str	r2, [r7, #68]	; 0x44
 8002ed0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e3      	bne.n	8002eaa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3314      	adds	r3, #20
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3314      	adds	r3, #20
 8002f02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f06:	633a      	str	r2, [r7, #48]	; 0x30
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e3      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0310 	bic.w	r3, r3, #16
 8002f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	330c      	adds	r3, #12
 8002f48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f4c:	61fa      	str	r2, [r7, #28]
 8002f4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	69b9      	ldr	r1, [r7, #24]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	617b      	str	r3, [r7, #20]
   return(result);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e3      	bne.n	8002f28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f83b 	bl	8002fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f72:	e023      	b.n	8002fbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <HAL_UART_IRQHandler+0x4f4>
 8002f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f953 	bl	8003238 <UART_Transmit_IT>
    return;
 8002f92:	e014      	b.n	8002fbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <HAL_UART_IRQHandler+0x51e>
 8002fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f992 	bl	80032d6 <UART_EndTransmit_IT>
    return;
 8002fb2:	e004      	b.n	8002fbe <HAL_UART_IRQHandler+0x51e>
    return;
 8002fb4:	bf00      	nop
 8002fb6:	e002      	b.n	8002fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8002fb8:	bf00      	nop
 8002fba:	e000      	b.n	8002fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8002fbc:	bf00      	nop
  }
}
 8002fbe:	37e8      	adds	r7, #232	; 0xe8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b090      	sub	sp, #64	; 0x40
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300e:	e050      	b.n	80030b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d04c      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <UART_WaitOnFlagUntilTimeout+0x30>
 800301e:	f7fd fd19 	bl	8000a54 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800302a:	429a      	cmp	r2, r3
 800302c:	d241      	bcs.n	80030b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	330c      	adds	r3, #12
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	330c      	adds	r3, #12
 800304c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800304e:	637a      	str	r2, [r7, #52]	; 0x34
 8003050:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e5      	bne.n	800302e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3314      	adds	r3, #20
 8003068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	e853 3f00 	ldrex	r3, [r3]
 8003070:	613b      	str	r3, [r7, #16]
   return(result);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	63bb      	str	r3, [r7, #56]	; 0x38
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3314      	adds	r3, #20
 8003080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003082:	623a      	str	r2, [r7, #32]
 8003084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	69f9      	ldr	r1, [r7, #28]
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e5      	bne.n	8003062 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e00f      	b.n	80030d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4013      	ands	r3, r2
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d09f      	beq.n	8003010 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3740      	adds	r7, #64	; 0x40
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030da:	b480      	push	{r7}
 80030dc:	b085      	sub	sp, #20
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	88fa      	ldrh	r2, [r7, #6]
 80030f2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2222      	movs	r2, #34	; 0x22
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800311e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0220 	orr.w	r2, r2, #32
 800313e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800314c:	b480      	push	{r7}
 800314e:	b095      	sub	sp, #84	; 0x54
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	330c      	adds	r3, #12
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315e:	e853 3f00 	ldrex	r3, [r3]
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	330c      	adds	r3, #12
 8003172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003174:	643a      	str	r2, [r7, #64]	; 0x40
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003178:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800317a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800317c:	e841 2300 	strex	r3, r2, [r1]
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e5      	bne.n	8003154 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3314      	adds	r3, #20
 800318e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	e853 3f00 	ldrex	r3, [r3]
 8003196:	61fb      	str	r3, [r7, #28]
   return(result);
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	64bb      	str	r3, [r7, #72]	; 0x48
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3314      	adds	r3, #20
 80031a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b0:	e841 2300 	strex	r3, r2, [r1]
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e5      	bne.n	8003188 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d119      	bne.n	80031f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f023 0310 	bic.w	r3, r3, #16
 80031da:	647b      	str	r3, [r7, #68]	; 0x44
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031e4:	61ba      	str	r2, [r7, #24]
 80031e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	6979      	ldr	r1, [r7, #20]
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	e841 2300 	strex	r3, r2, [r1]
 80031f0:	613b      	str	r3, [r7, #16]
   return(result);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e5      	bne.n	80031c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003206:	bf00      	nop
 8003208:	3754      	adds	r7, #84	; 0x54
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff fed3 	bl	8002fd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b21      	cmp	r3, #33	; 0x21
 800324a:	d13e      	bne.n	80032ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003254:	d114      	bne.n	8003280 <UART_Transmit_IT+0x48>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d110      	bne.n	8003280 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003272:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	1c9a      	adds	r2, r3, #2
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	621a      	str	r2, [r3, #32]
 800327e:	e008      	b.n	8003292 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	1c59      	adds	r1, r3, #1
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6211      	str	r1, [r2, #32]
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29b      	uxth	r3, r3
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4619      	mov	r1, r3
 80032a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e000      	b.n	80032cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
  }
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff fe64 	bl	8002fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b08c      	sub	sp, #48	; 0x30
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b22      	cmp	r3, #34	; 0x22
 8003318:	f040 80ae 	bne.w	8003478 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	d117      	bne.n	8003356 <UART_Receive_IT+0x50>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d113      	bne.n	8003356 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	b29b      	uxth	r3, r3
 8003340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003344:	b29a      	uxth	r2, r3
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	1c9a      	adds	r2, r3, #2
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
 8003354:	e026      	b.n	80033a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800335c:	2300      	movs	r3, #0
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003368:	d007      	beq.n	800337a <UART_Receive_IT+0x74>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <UART_Receive_IT+0x82>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e008      	b.n	800339a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003394:	b2da      	uxtb	r2, r3
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4619      	mov	r1, r3
 80033b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d15d      	bne.n	8003474 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0220 	bic.w	r2, r2, #32
 80033c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d135      	bne.n	800346a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	330c      	adds	r3, #12
 800340a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	e853 3f00 	ldrex	r3, [r3]
 8003412:	613b      	str	r3, [r7, #16]
   return(result);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f023 0310 	bic.w	r3, r3, #16
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	623a      	str	r2, [r7, #32]
 8003426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	69f9      	ldr	r1, [r7, #28]
 800342a:	6a3a      	ldr	r2, [r7, #32]
 800342c:	e841 2300 	strex	r3, r2, [r1]
 8003430:	61bb      	str	r3, [r7, #24]
   return(result);
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e5      	bne.n	8003404 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b10      	cmp	r3, #16
 8003444:	d10a      	bne.n	800345c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003460:	4619      	mov	r1, r3
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff fdc0 	bl	8002fe8 <HAL_UARTEx_RxEventCallback>
 8003468:	e002      	b.n	8003470 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fc feae 	bl	80001cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e002      	b.n	800347a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	3730      	adds	r7, #48	; 0x30
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034be:	f023 030c 	bic.w	r3, r3, #12
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UART_SetConfig+0x114>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034ec:	f7fe fd10 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	e002      	b.n	80034fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034f4:	f7fe fcf8 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 80034f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	4a22      	ldr	r2, [pc, #136]	; (800359c <UART_SetConfig+0x118>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	0119      	lsls	r1, r3, #4
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	009a      	lsls	r2, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003530:	4b1a      	ldr	r3, [pc, #104]	; (800359c <UART_SetConfig+0x118>)
 8003532:	fba3 0302 	umull	r0, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2064      	movs	r0, #100	; 0x64
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	3332      	adds	r3, #50	; 0x32
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <UART_SetConfig+0x118>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003550:	4419      	add	r1, r3
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <UART_SetConfig+0x118>)
 800356a:	fba3 0302 	umull	r0, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2064      	movs	r0, #100	; 0x64
 8003572:	fb00 f303 	mul.w	r3, r0, r3
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	3332      	adds	r3, #50	; 0x32
 800357c:	4a07      	ldr	r2, [pc, #28]	; (800359c <UART_SetConfig+0x118>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	440a      	add	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013800 	.word	0x40013800
 800359c:	51eb851f 	.word	0x51eb851f

080035a0 <__errno>:
 80035a0:	4b01      	ldr	r3, [pc, #4]	; (80035a8 <__errno+0x8>)
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	2000000c 	.word	0x2000000c

080035ac <__libc_init_array>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	2600      	movs	r6, #0
 80035b0:	4d0c      	ldr	r5, [pc, #48]	; (80035e4 <__libc_init_array+0x38>)
 80035b2:	4c0d      	ldr	r4, [pc, #52]	; (80035e8 <__libc_init_array+0x3c>)
 80035b4:	1b64      	subs	r4, r4, r5
 80035b6:	10a4      	asrs	r4, r4, #2
 80035b8:	42a6      	cmp	r6, r4
 80035ba:	d109      	bne.n	80035d0 <__libc_init_array+0x24>
 80035bc:	f000 fc5c 	bl	8003e78 <_init>
 80035c0:	2600      	movs	r6, #0
 80035c2:	4d0a      	ldr	r5, [pc, #40]	; (80035ec <__libc_init_array+0x40>)
 80035c4:	4c0a      	ldr	r4, [pc, #40]	; (80035f0 <__libc_init_array+0x44>)
 80035c6:	1b64      	subs	r4, r4, r5
 80035c8:	10a4      	asrs	r4, r4, #2
 80035ca:	42a6      	cmp	r6, r4
 80035cc:	d105      	bne.n	80035da <__libc_init_array+0x2e>
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
 80035d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d4:	4798      	blx	r3
 80035d6:	3601      	adds	r6, #1
 80035d8:	e7ee      	b.n	80035b8 <__libc_init_array+0xc>
 80035da:	f855 3b04 	ldr.w	r3, [r5], #4
 80035de:	4798      	blx	r3
 80035e0:	3601      	adds	r6, #1
 80035e2:	e7f2      	b.n	80035ca <__libc_init_array+0x1e>
 80035e4:	08003efc 	.word	0x08003efc
 80035e8:	08003efc 	.word	0x08003efc
 80035ec:	08003efc 	.word	0x08003efc
 80035f0:	08003f00 	.word	0x08003f00

080035f4 <memset>:
 80035f4:	4603      	mov	r3, r0
 80035f6:	4402      	add	r2, r0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d100      	bne.n	80035fe <memset+0xa>
 80035fc:	4770      	bx	lr
 80035fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003602:	e7f9      	b.n	80035f8 <memset+0x4>

08003604 <siprintf>:
 8003604:	b40e      	push	{r1, r2, r3}
 8003606:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800360a:	b500      	push	{lr}
 800360c:	b09c      	sub	sp, #112	; 0x70
 800360e:	ab1d      	add	r3, sp, #116	; 0x74
 8003610:	9002      	str	r0, [sp, #8]
 8003612:	9006      	str	r0, [sp, #24]
 8003614:	9107      	str	r1, [sp, #28]
 8003616:	9104      	str	r1, [sp, #16]
 8003618:	4808      	ldr	r0, [pc, #32]	; (800363c <siprintf+0x38>)
 800361a:	4909      	ldr	r1, [pc, #36]	; (8003640 <siprintf+0x3c>)
 800361c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003620:	9105      	str	r1, [sp, #20]
 8003622:	6800      	ldr	r0, [r0, #0]
 8003624:	a902      	add	r1, sp, #8
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	f000 f868 	bl	80036fc <_svfiprintf_r>
 800362c:	2200      	movs	r2, #0
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	b01c      	add	sp, #112	; 0x70
 8003634:	f85d eb04 	ldr.w	lr, [sp], #4
 8003638:	b003      	add	sp, #12
 800363a:	4770      	bx	lr
 800363c:	2000000c 	.word	0x2000000c
 8003640:	ffff0208 	.word	0xffff0208

08003644 <__ssputs_r>:
 8003644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003648:	688e      	ldr	r6, [r1, #8]
 800364a:	4682      	mov	sl, r0
 800364c:	429e      	cmp	r6, r3
 800364e:	460c      	mov	r4, r1
 8003650:	4690      	mov	r8, r2
 8003652:	461f      	mov	r7, r3
 8003654:	d838      	bhi.n	80036c8 <__ssputs_r+0x84>
 8003656:	898a      	ldrh	r2, [r1, #12]
 8003658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800365c:	d032      	beq.n	80036c4 <__ssputs_r+0x80>
 800365e:	6825      	ldr	r5, [r4, #0]
 8003660:	6909      	ldr	r1, [r1, #16]
 8003662:	3301      	adds	r3, #1
 8003664:	eba5 0901 	sub.w	r9, r5, r1
 8003668:	6965      	ldr	r5, [r4, #20]
 800366a:	444b      	add	r3, r9
 800366c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003674:	106d      	asrs	r5, r5, #1
 8003676:	429d      	cmp	r5, r3
 8003678:	bf38      	it	cc
 800367a:	461d      	movcc	r5, r3
 800367c:	0553      	lsls	r3, r2, #21
 800367e:	d531      	bpl.n	80036e4 <__ssputs_r+0xa0>
 8003680:	4629      	mov	r1, r5
 8003682:	f000 fb53 	bl	8003d2c <_malloc_r>
 8003686:	4606      	mov	r6, r0
 8003688:	b950      	cbnz	r0, 80036a0 <__ssputs_r+0x5c>
 800368a:	230c      	movs	r3, #12
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	f8ca 3000 	str.w	r3, [sl]
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a0:	464a      	mov	r2, r9
 80036a2:	6921      	ldr	r1, [r4, #16]
 80036a4:	f000 face 	bl	8003c44 <memcpy>
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	6126      	str	r6, [r4, #16]
 80036b6:	444e      	add	r6, r9
 80036b8:	6026      	str	r6, [r4, #0]
 80036ba:	463e      	mov	r6, r7
 80036bc:	6165      	str	r5, [r4, #20]
 80036be:	eba5 0509 	sub.w	r5, r5, r9
 80036c2:	60a5      	str	r5, [r4, #8]
 80036c4:	42be      	cmp	r6, r7
 80036c6:	d900      	bls.n	80036ca <__ssputs_r+0x86>
 80036c8:	463e      	mov	r6, r7
 80036ca:	4632      	mov	r2, r6
 80036cc:	4641      	mov	r1, r8
 80036ce:	6820      	ldr	r0, [r4, #0]
 80036d0:	f000 fac6 	bl	8003c60 <memmove>
 80036d4:	68a3      	ldr	r3, [r4, #8]
 80036d6:	6822      	ldr	r2, [r4, #0]
 80036d8:	1b9b      	subs	r3, r3, r6
 80036da:	4432      	add	r2, r6
 80036dc:	2000      	movs	r0, #0
 80036de:	60a3      	str	r3, [r4, #8]
 80036e0:	6022      	str	r2, [r4, #0]
 80036e2:	e7db      	b.n	800369c <__ssputs_r+0x58>
 80036e4:	462a      	mov	r2, r5
 80036e6:	f000 fb7b 	bl	8003de0 <_realloc_r>
 80036ea:	4606      	mov	r6, r0
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d1e1      	bne.n	80036b4 <__ssputs_r+0x70>
 80036f0:	4650      	mov	r0, sl
 80036f2:	6921      	ldr	r1, [r4, #16]
 80036f4:	f000 face 	bl	8003c94 <_free_r>
 80036f8:	e7c7      	b.n	800368a <__ssputs_r+0x46>
	...

080036fc <_svfiprintf_r>:
 80036fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003700:	4698      	mov	r8, r3
 8003702:	898b      	ldrh	r3, [r1, #12]
 8003704:	4607      	mov	r7, r0
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	460d      	mov	r5, r1
 800370a:	4614      	mov	r4, r2
 800370c:	b09d      	sub	sp, #116	; 0x74
 800370e:	d50e      	bpl.n	800372e <_svfiprintf_r+0x32>
 8003710:	690b      	ldr	r3, [r1, #16]
 8003712:	b963      	cbnz	r3, 800372e <_svfiprintf_r+0x32>
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	f000 fb09 	bl	8003d2c <_malloc_r>
 800371a:	6028      	str	r0, [r5, #0]
 800371c:	6128      	str	r0, [r5, #16]
 800371e:	b920      	cbnz	r0, 800372a <_svfiprintf_r+0x2e>
 8003720:	230c      	movs	r3, #12
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	e0d1      	b.n	80038ce <_svfiprintf_r+0x1d2>
 800372a:	2340      	movs	r3, #64	; 0x40
 800372c:	616b      	str	r3, [r5, #20]
 800372e:	2300      	movs	r3, #0
 8003730:	9309      	str	r3, [sp, #36]	; 0x24
 8003732:	2320      	movs	r3, #32
 8003734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003738:	2330      	movs	r3, #48	; 0x30
 800373a:	f04f 0901 	mov.w	r9, #1
 800373e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003742:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038e8 <_svfiprintf_r+0x1ec>
 8003746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800374a:	4623      	mov	r3, r4
 800374c:	469a      	mov	sl, r3
 800374e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003752:	b10a      	cbz	r2, 8003758 <_svfiprintf_r+0x5c>
 8003754:	2a25      	cmp	r2, #37	; 0x25
 8003756:	d1f9      	bne.n	800374c <_svfiprintf_r+0x50>
 8003758:	ebba 0b04 	subs.w	fp, sl, r4
 800375c:	d00b      	beq.n	8003776 <_svfiprintf_r+0x7a>
 800375e:	465b      	mov	r3, fp
 8003760:	4622      	mov	r2, r4
 8003762:	4629      	mov	r1, r5
 8003764:	4638      	mov	r0, r7
 8003766:	f7ff ff6d 	bl	8003644 <__ssputs_r>
 800376a:	3001      	adds	r0, #1
 800376c:	f000 80aa 	beq.w	80038c4 <_svfiprintf_r+0x1c8>
 8003770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003772:	445a      	add	r2, fp
 8003774:	9209      	str	r2, [sp, #36]	; 0x24
 8003776:	f89a 3000 	ldrb.w	r3, [sl]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80a2 	beq.w	80038c4 <_svfiprintf_r+0x1c8>
 8003780:	2300      	movs	r3, #0
 8003782:	f04f 32ff 	mov.w	r2, #4294967295
 8003786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800378a:	f10a 0a01 	add.w	sl, sl, #1
 800378e:	9304      	str	r3, [sp, #16]
 8003790:	9307      	str	r3, [sp, #28]
 8003792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003796:	931a      	str	r3, [sp, #104]	; 0x68
 8003798:	4654      	mov	r4, sl
 800379a:	2205      	movs	r2, #5
 800379c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a0:	4851      	ldr	r0, [pc, #324]	; (80038e8 <_svfiprintf_r+0x1ec>)
 80037a2:	f000 fa41 	bl	8003c28 <memchr>
 80037a6:	9a04      	ldr	r2, [sp, #16]
 80037a8:	b9d8      	cbnz	r0, 80037e2 <_svfiprintf_r+0xe6>
 80037aa:	06d0      	lsls	r0, r2, #27
 80037ac:	bf44      	itt	mi
 80037ae:	2320      	movmi	r3, #32
 80037b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b4:	0711      	lsls	r1, r2, #28
 80037b6:	bf44      	itt	mi
 80037b8:	232b      	movmi	r3, #43	; 0x2b
 80037ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037be:	f89a 3000 	ldrb.w	r3, [sl]
 80037c2:	2b2a      	cmp	r3, #42	; 0x2a
 80037c4:	d015      	beq.n	80037f2 <_svfiprintf_r+0xf6>
 80037c6:	4654      	mov	r4, sl
 80037c8:	2000      	movs	r0, #0
 80037ca:	f04f 0c0a 	mov.w	ip, #10
 80037ce:	9a07      	ldr	r2, [sp, #28]
 80037d0:	4621      	mov	r1, r4
 80037d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037d6:	3b30      	subs	r3, #48	; 0x30
 80037d8:	2b09      	cmp	r3, #9
 80037da:	d94e      	bls.n	800387a <_svfiprintf_r+0x17e>
 80037dc:	b1b0      	cbz	r0, 800380c <_svfiprintf_r+0x110>
 80037de:	9207      	str	r2, [sp, #28]
 80037e0:	e014      	b.n	800380c <_svfiprintf_r+0x110>
 80037e2:	eba0 0308 	sub.w	r3, r0, r8
 80037e6:	fa09 f303 	lsl.w	r3, r9, r3
 80037ea:	4313      	orrs	r3, r2
 80037ec:	46a2      	mov	sl, r4
 80037ee:	9304      	str	r3, [sp, #16]
 80037f0:	e7d2      	b.n	8003798 <_svfiprintf_r+0x9c>
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	1d19      	adds	r1, r3, #4
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	9103      	str	r1, [sp, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bfbb      	ittet	lt
 80037fe:	425b      	neglt	r3, r3
 8003800:	f042 0202 	orrlt.w	r2, r2, #2
 8003804:	9307      	strge	r3, [sp, #28]
 8003806:	9307      	strlt	r3, [sp, #28]
 8003808:	bfb8      	it	lt
 800380a:	9204      	strlt	r2, [sp, #16]
 800380c:	7823      	ldrb	r3, [r4, #0]
 800380e:	2b2e      	cmp	r3, #46	; 0x2e
 8003810:	d10c      	bne.n	800382c <_svfiprintf_r+0x130>
 8003812:	7863      	ldrb	r3, [r4, #1]
 8003814:	2b2a      	cmp	r3, #42	; 0x2a
 8003816:	d135      	bne.n	8003884 <_svfiprintf_r+0x188>
 8003818:	9b03      	ldr	r3, [sp, #12]
 800381a:	3402      	adds	r4, #2
 800381c:	1d1a      	adds	r2, r3, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	9203      	str	r2, [sp, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	bfb8      	it	lt
 8003826:	f04f 33ff 	movlt.w	r3, #4294967295
 800382a:	9305      	str	r3, [sp, #20]
 800382c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038f8 <_svfiprintf_r+0x1fc>
 8003830:	2203      	movs	r2, #3
 8003832:	4650      	mov	r0, sl
 8003834:	7821      	ldrb	r1, [r4, #0]
 8003836:	f000 f9f7 	bl	8003c28 <memchr>
 800383a:	b140      	cbz	r0, 800384e <_svfiprintf_r+0x152>
 800383c:	2340      	movs	r3, #64	; 0x40
 800383e:	eba0 000a 	sub.w	r0, r0, sl
 8003842:	fa03 f000 	lsl.w	r0, r3, r0
 8003846:	9b04      	ldr	r3, [sp, #16]
 8003848:	3401      	adds	r4, #1
 800384a:	4303      	orrs	r3, r0
 800384c:	9304      	str	r3, [sp, #16]
 800384e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003852:	2206      	movs	r2, #6
 8003854:	4825      	ldr	r0, [pc, #148]	; (80038ec <_svfiprintf_r+0x1f0>)
 8003856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800385a:	f000 f9e5 	bl	8003c28 <memchr>
 800385e:	2800      	cmp	r0, #0
 8003860:	d038      	beq.n	80038d4 <_svfiprintf_r+0x1d8>
 8003862:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <_svfiprintf_r+0x1f4>)
 8003864:	bb1b      	cbnz	r3, 80038ae <_svfiprintf_r+0x1b2>
 8003866:	9b03      	ldr	r3, [sp, #12]
 8003868:	3307      	adds	r3, #7
 800386a:	f023 0307 	bic.w	r3, r3, #7
 800386e:	3308      	adds	r3, #8
 8003870:	9303      	str	r3, [sp, #12]
 8003872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003874:	4433      	add	r3, r6
 8003876:	9309      	str	r3, [sp, #36]	; 0x24
 8003878:	e767      	b.n	800374a <_svfiprintf_r+0x4e>
 800387a:	460c      	mov	r4, r1
 800387c:	2001      	movs	r0, #1
 800387e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003882:	e7a5      	b.n	80037d0 <_svfiprintf_r+0xd4>
 8003884:	2300      	movs	r3, #0
 8003886:	f04f 0c0a 	mov.w	ip, #10
 800388a:	4619      	mov	r1, r3
 800388c:	3401      	adds	r4, #1
 800388e:	9305      	str	r3, [sp, #20]
 8003890:	4620      	mov	r0, r4
 8003892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003896:	3a30      	subs	r2, #48	; 0x30
 8003898:	2a09      	cmp	r2, #9
 800389a:	d903      	bls.n	80038a4 <_svfiprintf_r+0x1a8>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0c5      	beq.n	800382c <_svfiprintf_r+0x130>
 80038a0:	9105      	str	r1, [sp, #20]
 80038a2:	e7c3      	b.n	800382c <_svfiprintf_r+0x130>
 80038a4:	4604      	mov	r4, r0
 80038a6:	2301      	movs	r3, #1
 80038a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80038ac:	e7f0      	b.n	8003890 <_svfiprintf_r+0x194>
 80038ae:	ab03      	add	r3, sp, #12
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	462a      	mov	r2, r5
 80038b4:	4638      	mov	r0, r7
 80038b6:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <_svfiprintf_r+0x1f8>)
 80038b8:	a904      	add	r1, sp, #16
 80038ba:	f3af 8000 	nop.w
 80038be:	1c42      	adds	r2, r0, #1
 80038c0:	4606      	mov	r6, r0
 80038c2:	d1d6      	bne.n	8003872 <_svfiprintf_r+0x176>
 80038c4:	89ab      	ldrh	r3, [r5, #12]
 80038c6:	065b      	lsls	r3, r3, #25
 80038c8:	f53f af2c 	bmi.w	8003724 <_svfiprintf_r+0x28>
 80038cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ce:	b01d      	add	sp, #116	; 0x74
 80038d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d4:	ab03      	add	r3, sp, #12
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	462a      	mov	r2, r5
 80038da:	4638      	mov	r0, r7
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <_svfiprintf_r+0x1f8>)
 80038de:	a904      	add	r1, sp, #16
 80038e0:	f000 f87c 	bl	80039dc <_printf_i>
 80038e4:	e7eb      	b.n	80038be <_svfiprintf_r+0x1c2>
 80038e6:	bf00      	nop
 80038e8:	08003ec6 	.word	0x08003ec6
 80038ec:	08003ed0 	.word	0x08003ed0
 80038f0:	00000000 	.word	0x00000000
 80038f4:	08003645 	.word	0x08003645
 80038f8:	08003ecc 	.word	0x08003ecc

080038fc <_printf_common>:
 80038fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003900:	4616      	mov	r6, r2
 8003902:	4699      	mov	r9, r3
 8003904:	688a      	ldr	r2, [r1, #8]
 8003906:	690b      	ldr	r3, [r1, #16]
 8003908:	4607      	mov	r7, r0
 800390a:	4293      	cmp	r3, r2
 800390c:	bfb8      	it	lt
 800390e:	4613      	movlt	r3, r2
 8003910:	6033      	str	r3, [r6, #0]
 8003912:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003916:	460c      	mov	r4, r1
 8003918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800391c:	b10a      	cbz	r2, 8003922 <_printf_common+0x26>
 800391e:	3301      	adds	r3, #1
 8003920:	6033      	str	r3, [r6, #0]
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	0699      	lsls	r1, r3, #26
 8003926:	bf42      	ittt	mi
 8003928:	6833      	ldrmi	r3, [r6, #0]
 800392a:	3302      	addmi	r3, #2
 800392c:	6033      	strmi	r3, [r6, #0]
 800392e:	6825      	ldr	r5, [r4, #0]
 8003930:	f015 0506 	ands.w	r5, r5, #6
 8003934:	d106      	bne.n	8003944 <_printf_common+0x48>
 8003936:	f104 0a19 	add.w	sl, r4, #25
 800393a:	68e3      	ldr	r3, [r4, #12]
 800393c:	6832      	ldr	r2, [r6, #0]
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	42ab      	cmp	r3, r5
 8003942:	dc28      	bgt.n	8003996 <_printf_common+0x9a>
 8003944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003948:	1e13      	subs	r3, r2, #0
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	bf18      	it	ne
 800394e:	2301      	movne	r3, #1
 8003950:	0692      	lsls	r2, r2, #26
 8003952:	d42d      	bmi.n	80039b0 <_printf_common+0xb4>
 8003954:	4649      	mov	r1, r9
 8003956:	4638      	mov	r0, r7
 8003958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800395c:	47c0      	blx	r8
 800395e:	3001      	adds	r0, #1
 8003960:	d020      	beq.n	80039a4 <_printf_common+0xa8>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	68e5      	ldr	r5, [r4, #12]
 8003966:	f003 0306 	and.w	r3, r3, #6
 800396a:	2b04      	cmp	r3, #4
 800396c:	bf18      	it	ne
 800396e:	2500      	movne	r5, #0
 8003970:	6832      	ldr	r2, [r6, #0]
 8003972:	f04f 0600 	mov.w	r6, #0
 8003976:	68a3      	ldr	r3, [r4, #8]
 8003978:	bf08      	it	eq
 800397a:	1aad      	subeq	r5, r5, r2
 800397c:	6922      	ldr	r2, [r4, #16]
 800397e:	bf08      	it	eq
 8003980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003984:	4293      	cmp	r3, r2
 8003986:	bfc4      	itt	gt
 8003988:	1a9b      	subgt	r3, r3, r2
 800398a:	18ed      	addgt	r5, r5, r3
 800398c:	341a      	adds	r4, #26
 800398e:	42b5      	cmp	r5, r6
 8003990:	d11a      	bne.n	80039c8 <_printf_common+0xcc>
 8003992:	2000      	movs	r0, #0
 8003994:	e008      	b.n	80039a8 <_printf_common+0xac>
 8003996:	2301      	movs	r3, #1
 8003998:	4652      	mov	r2, sl
 800399a:	4649      	mov	r1, r9
 800399c:	4638      	mov	r0, r7
 800399e:	47c0      	blx	r8
 80039a0:	3001      	adds	r0, #1
 80039a2:	d103      	bne.n	80039ac <_printf_common+0xb0>
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ac:	3501      	adds	r5, #1
 80039ae:	e7c4      	b.n	800393a <_printf_common+0x3e>
 80039b0:	2030      	movs	r0, #48	; 0x30
 80039b2:	18e1      	adds	r1, r4, r3
 80039b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039be:	4422      	add	r2, r4
 80039c0:	3302      	adds	r3, #2
 80039c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039c6:	e7c5      	b.n	8003954 <_printf_common+0x58>
 80039c8:	2301      	movs	r3, #1
 80039ca:	4622      	mov	r2, r4
 80039cc:	4649      	mov	r1, r9
 80039ce:	4638      	mov	r0, r7
 80039d0:	47c0      	blx	r8
 80039d2:	3001      	adds	r0, #1
 80039d4:	d0e6      	beq.n	80039a4 <_printf_common+0xa8>
 80039d6:	3601      	adds	r6, #1
 80039d8:	e7d9      	b.n	800398e <_printf_common+0x92>
	...

080039dc <_printf_i>:
 80039dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039e0:	460c      	mov	r4, r1
 80039e2:	7e27      	ldrb	r7, [r4, #24]
 80039e4:	4691      	mov	r9, r2
 80039e6:	2f78      	cmp	r7, #120	; 0x78
 80039e8:	4680      	mov	r8, r0
 80039ea:	469a      	mov	sl, r3
 80039ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039f2:	d807      	bhi.n	8003a04 <_printf_i+0x28>
 80039f4:	2f62      	cmp	r7, #98	; 0x62
 80039f6:	d80a      	bhi.n	8003a0e <_printf_i+0x32>
 80039f8:	2f00      	cmp	r7, #0
 80039fa:	f000 80d9 	beq.w	8003bb0 <_printf_i+0x1d4>
 80039fe:	2f58      	cmp	r7, #88	; 0x58
 8003a00:	f000 80a4 	beq.w	8003b4c <_printf_i+0x170>
 8003a04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a0c:	e03a      	b.n	8003a84 <_printf_i+0xa8>
 8003a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a12:	2b15      	cmp	r3, #21
 8003a14:	d8f6      	bhi.n	8003a04 <_printf_i+0x28>
 8003a16:	a001      	add	r0, pc, #4	; (adr r0, 8003a1c <_printf_i+0x40>)
 8003a18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a1c:	08003a75 	.word	0x08003a75
 8003a20:	08003a89 	.word	0x08003a89
 8003a24:	08003a05 	.word	0x08003a05
 8003a28:	08003a05 	.word	0x08003a05
 8003a2c:	08003a05 	.word	0x08003a05
 8003a30:	08003a05 	.word	0x08003a05
 8003a34:	08003a89 	.word	0x08003a89
 8003a38:	08003a05 	.word	0x08003a05
 8003a3c:	08003a05 	.word	0x08003a05
 8003a40:	08003a05 	.word	0x08003a05
 8003a44:	08003a05 	.word	0x08003a05
 8003a48:	08003b97 	.word	0x08003b97
 8003a4c:	08003ab9 	.word	0x08003ab9
 8003a50:	08003b79 	.word	0x08003b79
 8003a54:	08003a05 	.word	0x08003a05
 8003a58:	08003a05 	.word	0x08003a05
 8003a5c:	08003bb9 	.word	0x08003bb9
 8003a60:	08003a05 	.word	0x08003a05
 8003a64:	08003ab9 	.word	0x08003ab9
 8003a68:	08003a05 	.word	0x08003a05
 8003a6c:	08003a05 	.word	0x08003a05
 8003a70:	08003b81 	.word	0x08003b81
 8003a74:	680b      	ldr	r3, [r1, #0]
 8003a76:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a7a:	1d1a      	adds	r2, r3, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	600a      	str	r2, [r1, #0]
 8003a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0a4      	b.n	8003bd2 <_printf_i+0x1f6>
 8003a88:	6825      	ldr	r5, [r4, #0]
 8003a8a:	6808      	ldr	r0, [r1, #0]
 8003a8c:	062e      	lsls	r6, r5, #24
 8003a8e:	f100 0304 	add.w	r3, r0, #4
 8003a92:	d50a      	bpl.n	8003aaa <_printf_i+0xce>
 8003a94:	6805      	ldr	r5, [r0, #0]
 8003a96:	600b      	str	r3, [r1, #0]
 8003a98:	2d00      	cmp	r5, #0
 8003a9a:	da03      	bge.n	8003aa4 <_printf_i+0xc8>
 8003a9c:	232d      	movs	r3, #45	; 0x2d
 8003a9e:	426d      	negs	r5, r5
 8003aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa4:	230a      	movs	r3, #10
 8003aa6:	485e      	ldr	r0, [pc, #376]	; (8003c20 <_printf_i+0x244>)
 8003aa8:	e019      	b.n	8003ade <_printf_i+0x102>
 8003aaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003aae:	6805      	ldr	r5, [r0, #0]
 8003ab0:	600b      	str	r3, [r1, #0]
 8003ab2:	bf18      	it	ne
 8003ab4:	b22d      	sxthne	r5, r5
 8003ab6:	e7ef      	b.n	8003a98 <_printf_i+0xbc>
 8003ab8:	680b      	ldr	r3, [r1, #0]
 8003aba:	6825      	ldr	r5, [r4, #0]
 8003abc:	1d18      	adds	r0, r3, #4
 8003abe:	6008      	str	r0, [r1, #0]
 8003ac0:	0628      	lsls	r0, r5, #24
 8003ac2:	d501      	bpl.n	8003ac8 <_printf_i+0xec>
 8003ac4:	681d      	ldr	r5, [r3, #0]
 8003ac6:	e002      	b.n	8003ace <_printf_i+0xf2>
 8003ac8:	0669      	lsls	r1, r5, #25
 8003aca:	d5fb      	bpl.n	8003ac4 <_printf_i+0xe8>
 8003acc:	881d      	ldrh	r5, [r3, #0]
 8003ace:	2f6f      	cmp	r7, #111	; 0x6f
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2308      	moveq	r3, #8
 8003ad4:	230a      	movne	r3, #10
 8003ad6:	4852      	ldr	r0, [pc, #328]	; (8003c20 <_printf_i+0x244>)
 8003ad8:	2100      	movs	r1, #0
 8003ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ade:	6866      	ldr	r6, [r4, #4]
 8003ae0:	2e00      	cmp	r6, #0
 8003ae2:	bfa8      	it	ge
 8003ae4:	6821      	ldrge	r1, [r4, #0]
 8003ae6:	60a6      	str	r6, [r4, #8]
 8003ae8:	bfa4      	itt	ge
 8003aea:	f021 0104 	bicge.w	r1, r1, #4
 8003aee:	6021      	strge	r1, [r4, #0]
 8003af0:	b90d      	cbnz	r5, 8003af6 <_printf_i+0x11a>
 8003af2:	2e00      	cmp	r6, #0
 8003af4:	d04d      	beq.n	8003b92 <_printf_i+0x1b6>
 8003af6:	4616      	mov	r6, r2
 8003af8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003afc:	fb03 5711 	mls	r7, r3, r1, r5
 8003b00:	5dc7      	ldrb	r7, [r0, r7]
 8003b02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b06:	462f      	mov	r7, r5
 8003b08:	42bb      	cmp	r3, r7
 8003b0a:	460d      	mov	r5, r1
 8003b0c:	d9f4      	bls.n	8003af8 <_printf_i+0x11c>
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d10b      	bne.n	8003b2a <_printf_i+0x14e>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	07df      	lsls	r7, r3, #31
 8003b16:	d508      	bpl.n	8003b2a <_printf_i+0x14e>
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	6861      	ldr	r1, [r4, #4]
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	bfde      	ittt	le
 8003b20:	2330      	movle	r3, #48	; 0x30
 8003b22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b2a:	1b92      	subs	r2, r2, r6
 8003b2c:	6122      	str	r2, [r4, #16]
 8003b2e:	464b      	mov	r3, r9
 8003b30:	4621      	mov	r1, r4
 8003b32:	4640      	mov	r0, r8
 8003b34:	f8cd a000 	str.w	sl, [sp]
 8003b38:	aa03      	add	r2, sp, #12
 8003b3a:	f7ff fedf 	bl	80038fc <_printf_common>
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d14c      	bne.n	8003bdc <_printf_i+0x200>
 8003b42:	f04f 30ff 	mov.w	r0, #4294967295
 8003b46:	b004      	add	sp, #16
 8003b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4c:	4834      	ldr	r0, [pc, #208]	; (8003c20 <_printf_i+0x244>)
 8003b4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b52:	680e      	ldr	r6, [r1, #0]
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b5a:	061f      	lsls	r7, r3, #24
 8003b5c:	600e      	str	r6, [r1, #0]
 8003b5e:	d514      	bpl.n	8003b8a <_printf_i+0x1ae>
 8003b60:	07d9      	lsls	r1, r3, #31
 8003b62:	bf44      	itt	mi
 8003b64:	f043 0320 	orrmi.w	r3, r3, #32
 8003b68:	6023      	strmi	r3, [r4, #0]
 8003b6a:	b91d      	cbnz	r5, 8003b74 <_printf_i+0x198>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f023 0320 	bic.w	r3, r3, #32
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	2310      	movs	r3, #16
 8003b76:	e7af      	b.n	8003ad8 <_printf_i+0xfc>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	f043 0320 	orr.w	r3, r3, #32
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	2378      	movs	r3, #120	; 0x78
 8003b82:	4828      	ldr	r0, [pc, #160]	; (8003c24 <_printf_i+0x248>)
 8003b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b88:	e7e3      	b.n	8003b52 <_printf_i+0x176>
 8003b8a:	065e      	lsls	r6, r3, #25
 8003b8c:	bf48      	it	mi
 8003b8e:	b2ad      	uxthmi	r5, r5
 8003b90:	e7e6      	b.n	8003b60 <_printf_i+0x184>
 8003b92:	4616      	mov	r6, r2
 8003b94:	e7bb      	b.n	8003b0e <_printf_i+0x132>
 8003b96:	680b      	ldr	r3, [r1, #0]
 8003b98:	6826      	ldr	r6, [r4, #0]
 8003b9a:	1d1d      	adds	r5, r3, #4
 8003b9c:	6960      	ldr	r0, [r4, #20]
 8003b9e:	600d      	str	r5, [r1, #0]
 8003ba0:	0635      	lsls	r5, r6, #24
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	d501      	bpl.n	8003baa <_printf_i+0x1ce>
 8003ba6:	6018      	str	r0, [r3, #0]
 8003ba8:	e002      	b.n	8003bb0 <_printf_i+0x1d4>
 8003baa:	0671      	lsls	r1, r6, #25
 8003bac:	d5fb      	bpl.n	8003ba6 <_printf_i+0x1ca>
 8003bae:	8018      	strh	r0, [r3, #0]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	4616      	mov	r6, r2
 8003bb4:	6123      	str	r3, [r4, #16]
 8003bb6:	e7ba      	b.n	8003b2e <_printf_i+0x152>
 8003bb8:	680b      	ldr	r3, [r1, #0]
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	600a      	str	r2, [r1, #0]
 8003bbe:	681e      	ldr	r6, [r3, #0]
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	6862      	ldr	r2, [r4, #4]
 8003bc6:	f000 f82f 	bl	8003c28 <memchr>
 8003bca:	b108      	cbz	r0, 8003bd0 <_printf_i+0x1f4>
 8003bcc:	1b80      	subs	r0, r0, r6
 8003bce:	6060      	str	r0, [r4, #4]
 8003bd0:	6863      	ldr	r3, [r4, #4]
 8003bd2:	6123      	str	r3, [r4, #16]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bda:	e7a8      	b.n	8003b2e <_printf_i+0x152>
 8003bdc:	4632      	mov	r2, r6
 8003bde:	4649      	mov	r1, r9
 8003be0:	4640      	mov	r0, r8
 8003be2:	6923      	ldr	r3, [r4, #16]
 8003be4:	47d0      	blx	sl
 8003be6:	3001      	adds	r0, #1
 8003be8:	d0ab      	beq.n	8003b42 <_printf_i+0x166>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	079b      	lsls	r3, r3, #30
 8003bee:	d413      	bmi.n	8003c18 <_printf_i+0x23c>
 8003bf0:	68e0      	ldr	r0, [r4, #12]
 8003bf2:	9b03      	ldr	r3, [sp, #12]
 8003bf4:	4298      	cmp	r0, r3
 8003bf6:	bfb8      	it	lt
 8003bf8:	4618      	movlt	r0, r3
 8003bfa:	e7a4      	b.n	8003b46 <_printf_i+0x16a>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4632      	mov	r2, r6
 8003c00:	4649      	mov	r1, r9
 8003c02:	4640      	mov	r0, r8
 8003c04:	47d0      	blx	sl
 8003c06:	3001      	adds	r0, #1
 8003c08:	d09b      	beq.n	8003b42 <_printf_i+0x166>
 8003c0a:	3501      	adds	r5, #1
 8003c0c:	68e3      	ldr	r3, [r4, #12]
 8003c0e:	9903      	ldr	r1, [sp, #12]
 8003c10:	1a5b      	subs	r3, r3, r1
 8003c12:	42ab      	cmp	r3, r5
 8003c14:	dcf2      	bgt.n	8003bfc <_printf_i+0x220>
 8003c16:	e7eb      	b.n	8003bf0 <_printf_i+0x214>
 8003c18:	2500      	movs	r5, #0
 8003c1a:	f104 0619 	add.w	r6, r4, #25
 8003c1e:	e7f5      	b.n	8003c0c <_printf_i+0x230>
 8003c20:	08003ed7 	.word	0x08003ed7
 8003c24:	08003ee8 	.word	0x08003ee8

08003c28 <memchr>:
 8003c28:	4603      	mov	r3, r0
 8003c2a:	b510      	push	{r4, lr}
 8003c2c:	b2c9      	uxtb	r1, r1
 8003c2e:	4402      	add	r2, r0
 8003c30:	4293      	cmp	r3, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	d101      	bne.n	8003c3a <memchr+0x12>
 8003c36:	2000      	movs	r0, #0
 8003c38:	e003      	b.n	8003c42 <memchr+0x1a>
 8003c3a:	7804      	ldrb	r4, [r0, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	428c      	cmp	r4, r1
 8003c40:	d1f6      	bne.n	8003c30 <memchr+0x8>
 8003c42:	bd10      	pop	{r4, pc}

08003c44 <memcpy>:
 8003c44:	440a      	add	r2, r1
 8003c46:	4291      	cmp	r1, r2
 8003c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c4c:	d100      	bne.n	8003c50 <memcpy+0xc>
 8003c4e:	4770      	bx	lr
 8003c50:	b510      	push	{r4, lr}
 8003c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c56:	4291      	cmp	r1, r2
 8003c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c5c:	d1f9      	bne.n	8003c52 <memcpy+0xe>
 8003c5e:	bd10      	pop	{r4, pc}

08003c60 <memmove>:
 8003c60:	4288      	cmp	r0, r1
 8003c62:	b510      	push	{r4, lr}
 8003c64:	eb01 0402 	add.w	r4, r1, r2
 8003c68:	d902      	bls.n	8003c70 <memmove+0x10>
 8003c6a:	4284      	cmp	r4, r0
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	d807      	bhi.n	8003c80 <memmove+0x20>
 8003c70:	1e43      	subs	r3, r0, #1
 8003c72:	42a1      	cmp	r1, r4
 8003c74:	d008      	beq.n	8003c88 <memmove+0x28>
 8003c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c7e:	e7f8      	b.n	8003c72 <memmove+0x12>
 8003c80:	4601      	mov	r1, r0
 8003c82:	4402      	add	r2, r0
 8003c84:	428a      	cmp	r2, r1
 8003c86:	d100      	bne.n	8003c8a <memmove+0x2a>
 8003c88:	bd10      	pop	{r4, pc}
 8003c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c92:	e7f7      	b.n	8003c84 <memmove+0x24>

08003c94 <_free_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4605      	mov	r5, r0
 8003c98:	2900      	cmp	r1, #0
 8003c9a:	d043      	beq.n	8003d24 <_free_r+0x90>
 8003c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca0:	1f0c      	subs	r4, r1, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bfb8      	it	lt
 8003ca6:	18e4      	addlt	r4, r4, r3
 8003ca8:	f000 f8d0 	bl	8003e4c <__malloc_lock>
 8003cac:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <_free_r+0x94>)
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	b933      	cbnz	r3, 8003cc2 <_free_r+0x2e>
 8003cb4:	6063      	str	r3, [r4, #4]
 8003cb6:	6014      	str	r4, [r2, #0]
 8003cb8:	4628      	mov	r0, r5
 8003cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cbe:	f000 b8cb 	b.w	8003e58 <__malloc_unlock>
 8003cc2:	42a3      	cmp	r3, r4
 8003cc4:	d90a      	bls.n	8003cdc <_free_r+0x48>
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	1862      	adds	r2, r4, r1
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	bf01      	itttt	eq
 8003cce:	681a      	ldreq	r2, [r3, #0]
 8003cd0:	685b      	ldreq	r3, [r3, #4]
 8003cd2:	1852      	addeq	r2, r2, r1
 8003cd4:	6022      	streq	r2, [r4, #0]
 8003cd6:	6063      	str	r3, [r4, #4]
 8003cd8:	6004      	str	r4, [r0, #0]
 8003cda:	e7ed      	b.n	8003cb8 <_free_r+0x24>
 8003cdc:	461a      	mov	r2, r3
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	b10b      	cbz	r3, 8003ce6 <_free_r+0x52>
 8003ce2:	42a3      	cmp	r3, r4
 8003ce4:	d9fa      	bls.n	8003cdc <_free_r+0x48>
 8003ce6:	6811      	ldr	r1, [r2, #0]
 8003ce8:	1850      	adds	r0, r2, r1
 8003cea:	42a0      	cmp	r0, r4
 8003cec:	d10b      	bne.n	8003d06 <_free_r+0x72>
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	4401      	add	r1, r0
 8003cf2:	1850      	adds	r0, r2, r1
 8003cf4:	4283      	cmp	r3, r0
 8003cf6:	6011      	str	r1, [r2, #0]
 8003cf8:	d1de      	bne.n	8003cb8 <_free_r+0x24>
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4401      	add	r1, r0
 8003d00:	6011      	str	r1, [r2, #0]
 8003d02:	6053      	str	r3, [r2, #4]
 8003d04:	e7d8      	b.n	8003cb8 <_free_r+0x24>
 8003d06:	d902      	bls.n	8003d0e <_free_r+0x7a>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	e7d4      	b.n	8003cb8 <_free_r+0x24>
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	1821      	adds	r1, r4, r0
 8003d12:	428b      	cmp	r3, r1
 8003d14:	bf01      	itttt	eq
 8003d16:	6819      	ldreq	r1, [r3, #0]
 8003d18:	685b      	ldreq	r3, [r3, #4]
 8003d1a:	1809      	addeq	r1, r1, r0
 8003d1c:	6021      	streq	r1, [r4, #0]
 8003d1e:	6063      	str	r3, [r4, #4]
 8003d20:	6054      	str	r4, [r2, #4]
 8003d22:	e7c9      	b.n	8003cb8 <_free_r+0x24>
 8003d24:	bd38      	pop	{r3, r4, r5, pc}
 8003d26:	bf00      	nop
 8003d28:	200000d8 	.word	0x200000d8

08003d2c <_malloc_r>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	1ccd      	adds	r5, r1, #3
 8003d30:	f025 0503 	bic.w	r5, r5, #3
 8003d34:	3508      	adds	r5, #8
 8003d36:	2d0c      	cmp	r5, #12
 8003d38:	bf38      	it	cc
 8003d3a:	250c      	movcc	r5, #12
 8003d3c:	2d00      	cmp	r5, #0
 8003d3e:	4606      	mov	r6, r0
 8003d40:	db01      	blt.n	8003d46 <_malloc_r+0x1a>
 8003d42:	42a9      	cmp	r1, r5
 8003d44:	d903      	bls.n	8003d4e <_malloc_r+0x22>
 8003d46:	230c      	movs	r3, #12
 8003d48:	6033      	str	r3, [r6, #0]
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d4e:	f000 f87d 	bl	8003e4c <__malloc_lock>
 8003d52:	4921      	ldr	r1, [pc, #132]	; (8003dd8 <_malloc_r+0xac>)
 8003d54:	680a      	ldr	r2, [r1, #0]
 8003d56:	4614      	mov	r4, r2
 8003d58:	b99c      	cbnz	r4, 8003d82 <_malloc_r+0x56>
 8003d5a:	4f20      	ldr	r7, [pc, #128]	; (8003ddc <_malloc_r+0xb0>)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	b923      	cbnz	r3, 8003d6a <_malloc_r+0x3e>
 8003d60:	4621      	mov	r1, r4
 8003d62:	4630      	mov	r0, r6
 8003d64:	f000 f862 	bl	8003e2c <_sbrk_r>
 8003d68:	6038      	str	r0, [r7, #0]
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f000 f85d 	bl	8003e2c <_sbrk_r>
 8003d72:	1c43      	adds	r3, r0, #1
 8003d74:	d123      	bne.n	8003dbe <_malloc_r+0x92>
 8003d76:	230c      	movs	r3, #12
 8003d78:	4630      	mov	r0, r6
 8003d7a:	6033      	str	r3, [r6, #0]
 8003d7c:	f000 f86c 	bl	8003e58 <__malloc_unlock>
 8003d80:	e7e3      	b.n	8003d4a <_malloc_r+0x1e>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	1b5b      	subs	r3, r3, r5
 8003d86:	d417      	bmi.n	8003db8 <_malloc_r+0x8c>
 8003d88:	2b0b      	cmp	r3, #11
 8003d8a:	d903      	bls.n	8003d94 <_malloc_r+0x68>
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	441c      	add	r4, r3
 8003d90:	6025      	str	r5, [r4, #0]
 8003d92:	e004      	b.n	8003d9e <_malloc_r+0x72>
 8003d94:	6863      	ldr	r3, [r4, #4]
 8003d96:	42a2      	cmp	r2, r4
 8003d98:	bf0c      	ite	eq
 8003d9a:	600b      	streq	r3, [r1, #0]
 8003d9c:	6053      	strne	r3, [r2, #4]
 8003d9e:	4630      	mov	r0, r6
 8003da0:	f000 f85a 	bl	8003e58 <__malloc_unlock>
 8003da4:	f104 000b 	add.w	r0, r4, #11
 8003da8:	1d23      	adds	r3, r4, #4
 8003daa:	f020 0007 	bic.w	r0, r0, #7
 8003dae:	1ac2      	subs	r2, r0, r3
 8003db0:	d0cc      	beq.n	8003d4c <_malloc_r+0x20>
 8003db2:	1a1b      	subs	r3, r3, r0
 8003db4:	50a3      	str	r3, [r4, r2]
 8003db6:	e7c9      	b.n	8003d4c <_malloc_r+0x20>
 8003db8:	4622      	mov	r2, r4
 8003dba:	6864      	ldr	r4, [r4, #4]
 8003dbc:	e7cc      	b.n	8003d58 <_malloc_r+0x2c>
 8003dbe:	1cc4      	adds	r4, r0, #3
 8003dc0:	f024 0403 	bic.w	r4, r4, #3
 8003dc4:	42a0      	cmp	r0, r4
 8003dc6:	d0e3      	beq.n	8003d90 <_malloc_r+0x64>
 8003dc8:	1a21      	subs	r1, r4, r0
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f000 f82e 	bl	8003e2c <_sbrk_r>
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d1dd      	bne.n	8003d90 <_malloc_r+0x64>
 8003dd4:	e7cf      	b.n	8003d76 <_malloc_r+0x4a>
 8003dd6:	bf00      	nop
 8003dd8:	200000d8 	.word	0x200000d8
 8003ddc:	200000dc 	.word	0x200000dc

08003de0 <_realloc_r>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	4607      	mov	r7, r0
 8003de4:	4614      	mov	r4, r2
 8003de6:	460e      	mov	r6, r1
 8003de8:	b921      	cbnz	r1, 8003df4 <_realloc_r+0x14>
 8003dea:	4611      	mov	r1, r2
 8003dec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003df0:	f7ff bf9c 	b.w	8003d2c <_malloc_r>
 8003df4:	b922      	cbnz	r2, 8003e00 <_realloc_r+0x20>
 8003df6:	f7ff ff4d 	bl	8003c94 <_free_r>
 8003dfa:	4625      	mov	r5, r4
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e00:	f000 f830 	bl	8003e64 <_malloc_usable_size_r>
 8003e04:	42a0      	cmp	r0, r4
 8003e06:	d20f      	bcs.n	8003e28 <_realloc_r+0x48>
 8003e08:	4621      	mov	r1, r4
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f7ff ff8e 	bl	8003d2c <_malloc_r>
 8003e10:	4605      	mov	r5, r0
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d0f2      	beq.n	8003dfc <_realloc_r+0x1c>
 8003e16:	4631      	mov	r1, r6
 8003e18:	4622      	mov	r2, r4
 8003e1a:	f7ff ff13 	bl	8003c44 <memcpy>
 8003e1e:	4631      	mov	r1, r6
 8003e20:	4638      	mov	r0, r7
 8003e22:	f7ff ff37 	bl	8003c94 <_free_r>
 8003e26:	e7e9      	b.n	8003dfc <_realloc_r+0x1c>
 8003e28:	4635      	mov	r5, r6
 8003e2a:	e7e7      	b.n	8003dfc <_realloc_r+0x1c>

08003e2c <_sbrk_r>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	2300      	movs	r3, #0
 8003e30:	4d05      	ldr	r5, [pc, #20]	; (8003e48 <_sbrk_r+0x1c>)
 8003e32:	4604      	mov	r4, r0
 8003e34:	4608      	mov	r0, r1
 8003e36:	602b      	str	r3, [r5, #0]
 8003e38:	f7fc fd52 	bl	80008e0 <_sbrk>
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	d102      	bne.n	8003e46 <_sbrk_r+0x1a>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	b103      	cbz	r3, 8003e46 <_sbrk_r+0x1a>
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	bd38      	pop	{r3, r4, r5, pc}
 8003e48:	200001a4 	.word	0x200001a4

08003e4c <__malloc_lock>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	; (8003e54 <__malloc_lock+0x8>)
 8003e4e:	f000 b811 	b.w	8003e74 <__retarget_lock_acquire_recursive>
 8003e52:	bf00      	nop
 8003e54:	200001ac 	.word	0x200001ac

08003e58 <__malloc_unlock>:
 8003e58:	4801      	ldr	r0, [pc, #4]	; (8003e60 <__malloc_unlock+0x8>)
 8003e5a:	f000 b80c 	b.w	8003e76 <__retarget_lock_release_recursive>
 8003e5e:	bf00      	nop
 8003e60:	200001ac 	.word	0x200001ac

08003e64 <_malloc_usable_size_r>:
 8003e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e68:	1f18      	subs	r0, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bfbc      	itt	lt
 8003e6e:	580b      	ldrlt	r3, [r1, r0]
 8003e70:	18c0      	addlt	r0, r0, r3
 8003e72:	4770      	bx	lr

08003e74 <__retarget_lock_acquire_recursive>:
 8003e74:	4770      	bx	lr

08003e76 <__retarget_lock_release_recursive>:
 8003e76:	4770      	bx	lr

08003e78 <_init>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	bf00      	nop
 8003e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7e:	bc08      	pop	{r3}
 8003e80:	469e      	mov	lr, r3
 8003e82:	4770      	bx	lr

08003e84 <_fini>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr
